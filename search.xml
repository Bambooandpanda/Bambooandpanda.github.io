<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第五周计划与总结</title>
      <link href="/2019/03/25/%E7%AC%AC%E4%BA%94%E5%91%A8%E8%AE%A1%E5%88%92%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
      <url>/2019/03/25/%E7%AC%AC%E4%BA%94%E5%91%A8%E8%AE%A1%E5%88%92%E4%B8%8E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="英语六级"><a href="#英语六级" class="headerlink" title="英语六级"></a>英语六级</h2><ul><li style="list-style: none"><input type="checkbox"> Word LIst 9</li><li style="list-style: none"><input type="checkbox"> Word List 10</li><li style="list-style: none"><input type="checkbox"> Word List 11</li><li style="list-style: none"><input type="checkbox"> Word List 12</li><li style="list-style: none"><input type="checkbox"> 六级题目一套</li></ul><h2 id="《离散数学及其应用》第一章：逻辑和证明"><a href="#《离散数学及其应用》第一章：逻辑和证明" class="headerlink" title="《离散数学及其应用》第一章：逻辑和证明"></a>《离散数学及其应用》第一章：逻辑和证明</h2><ul><li style="list-style: none"><input type="checkbox"> 命题逻辑</li><li style="list-style: none"><input type="checkbox"> 命题逻辑的应用</li><li style="list-style: none"><input type="checkbox"> 命题等价式</li><li style="list-style: none"><input type="checkbox"> 谓词和量词</li><li style="list-style: none"><input type="checkbox"> 嵌套量词</li><li style="list-style: none"><input type="checkbox"> 推理规则</li><li style="list-style: none"><input type="checkbox"> 证明导论</li><li style="list-style: none"><input type="checkbox"> 证明的方法和策略</li></ul><h2 id="算法基础"><a href="#算法基础" class="headerlink" title="算法基础"></a>算法基础</h2><ul><li style="list-style: none"><input type="checkbox"> 第二章 如何描述和评估计算机算法</li><li style="list-style: none"><input type="checkbox"> 第三章 排序算法和查找算法（要亲手在电脑上用C语言或者C++实现一遍）</li><li style="list-style: none"><input type="checkbox"> 第四章 排序算法的下界和如何超越下界</li><li style="list-style: none"><input type="checkbox"> 第五章 有向无环图</li></ul><h2 id="高等数学"><a href="#高等数学" class="headerlink" title="高等数学"></a>高等数学</h2><ul><li style="list-style: none"><input type="checkbox"> 复习第八章</li><li style="list-style: none"><input type="checkbox"> 复习9.1</li><li style="list-style: none"><input type="checkbox"> 复习9.2</li><li style="list-style: none"><input type="checkbox"> 复习9.3</li><li style="list-style: none"><input type="checkbox"> 复习9.4</li><li style="list-style: none"><input type="checkbox"> 9.5</li><li style="list-style: none"><input type="checkbox"> 9.6</li><li style="list-style: none"><input type="checkbox"> 9.7</li><li style="list-style: none"><input type="checkbox"> 9.8</li></ul><h2 id="Java编程思维"><a href="#Java编程思维" class="headerlink" title="Java编程思维"></a>Java编程思维</h2><ul><li style="list-style: none"><input type="checkbox"> 编程之道</li><li style="list-style: none"><input type="checkbox"> 变量和运算符</li><li style="list-style: none"><input type="checkbox"> 输入和输出</li><li style="list-style: none"><input type="checkbox"> void方法</li><li style="list-style: none"><input type="checkbox"> 条件和逻辑</li><li style="list-style: none"><input type="checkbox"> 值方法</li><li style="list-style: none"><input type="checkbox"> 循环</li><li style="list-style: none"><input type="checkbox"> 数组</li><li style="list-style: none"><input type="checkbox"> 字符串</li><li style="list-style: none"><input type="checkbox"> 对象</li><li style="list-style: none"><input type="checkbox"> 类</li><li style="list-style: none"><input type="checkbox"> 对象数组</li><li style="list-style: none"><input type="checkbox"> 数组对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大一下计划与总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++数组形参</title>
      <link href="/2019/03/24/postC-%E6%95%B0%E7%BB%84%E5%BD%A2%E5%8F%82/"/>
      <url>/2019/03/24/postC-%E6%95%B0%E7%BB%84%E5%BD%A2%E5%8F%82/</url>
      
        <content type="html"><![CDATA[<p>因为数组会被转换为指针，所以当我们为函数传递一个数组的时候，实际上<strong>传递的是指向数组首元素的指针</strong></p><p>尽管不能以值传递的方式传递数组，但是我们可以把形参写成类似数组的形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void print(const int*);void print(const int[]);//可以看出来，函数的意图是作用于一个数组void print(const int[10]);//这里的维度表示  我们期望  数组中含有多少元素，实际不一定！</span><br></pre></td></tr></table></figure><h2 id="使用标记指定数组长度"><a href="#使用标记指定数组长度" class="headerlink" title="使用标记指定数组长度"></a>使用标记指定数组长度</h2><p>适合有明显结束标记并且该标记不会与普通数据混淆的情况，例如字符数组，但是对于例如int类型的数组就不太有效了</p><h2 id="使用标准库规范begin-和end"><a href="#使用标准库规范begin-和end" class="headerlink" title="使用标准库规范begin()和end()"></a>使用标准库规范begin()和end()</h2><p>传递数组首元素和尾后元素的指针</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void print(const int *beg, const int *end)&#123;    while(beg!=end)&#123;        cout&lt;&lt;*beg++&lt;&lt;endl;    &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="数组形参和const"><a href="#数组形参和const" class="headerlink" title="数组形参和const"></a>数组形参和const</h2><p>当函数不需要对数组元素执行写操作的时候，数组形参应当是指向const的指针。只有当函数确实需要改变元素值的时候，才把形参定义成指向非常量的指针。</p><p>（注意：数组会被转换为指针，当我们为函数传递一个数组的时候，实际上<strong>传递的是指向数组首元素的指针</strong>）</p><h2 id="数组引用类型"><a href="#数组引用类型" class="headerlink" title="数组引用类型"></a>数组引用类型</h2><p>注意数组的引用形式！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void print(int (&amp;arr)[10])&#123;    for(auto elem : arr)        cout&lt;&lt;elem&lt;&lt;endl;&#125;</span><br></pre></td></tr></table></figure><h2 id="传递多维数组"><a href="#传递多维数组" class="headerlink" title="传递多维数组"></a>传递多维数组</h2><p>C++中实际上没有真正的多维数组，所谓的多维数组就是数组的数组</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>泛型算法——再探迭代器</title>
      <link href="/2019/03/19/%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E5%86%8D%E6%8E%A2%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
      <url>/2019/03/19/%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E5%86%8D%E6%8E%A2%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="插入迭代器"><a href="#插入迭代器" class="headerlink" title="插入迭代器"></a>插入迭代器</h1><p>插入迭代器是一种<strong>迭代器适配器</strong>，它接受一个容器，生成一个迭代器，能实现向给定容器添加元素。</p><h2 id="插入迭代器操作"><a href="#插入迭代器操作" class="headerlink" title="插入迭代器操作"></a>插入迭代器操作</h2><ul><li>it=t    在it指定的当前位置插入值t。假定c是it绑定的容器，依赖于插入迭代器种类的不同，此赋值会分别调用c.push_back(t) c.push_front(t) c.inserter(t,p)，其中p为传递给inserter的迭代器位置</li><li>*t ++t t++    这些操作虽然存在，但是不会对it做任何事情，返回值是it</li></ul><p><strong>只有在容器支持push_back的情况下，我们才能使用back_inserter，front_inserter同理</strong></p><p>front_inserter生成的迭代器的行为与inserter生成的迭代器完全不一样。当我们使用front_inserter的时候，元素总是 插入到容器第一个元素之前。即使我们传递给inserter的位置原来指向第一个元素，只要我们在此元素之前插入一个新元素，此元素就不再是容器的首元素了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> &lt;<span class="keyword">int</span>&gt; lst=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">list</span> &lt;<span class="keyword">int</span>&gt; lst2,lst3;</span><br><span class="line"><span class="comment">//拷贝完成之后，lst2包含4321</span></span><br><span class="line">copy(lst.cbegin(),lst.cend(),front_inserter(lst2));</span><br><span class="line"><span class="comment">//拷贝完成之后，lst3包含1234</span></span><br><span class="line">copy(lst.cbegin(),lst.cend(),inserter(lst3,lst3.begin()));</span><br></pre></td></tr></table></figure><h1 id="iostream迭代器"><a href="#iostream迭代器" class="headerlink" title="iostream迭代器"></a>iostream迭代器</h1><h2 id="istream-iterator操作"><a href="#istream-iterator操作" class="headerlink" title="istream_iterator操作"></a>istream_iterator操作</h2><p>当创建一个流迭代器的时，必须制定迭代器要读写的对象类型。一个istream_iterator使用&gt;&gt;来读取流。当创建一个istream_iterator时，我们可以将它绑定到一个流。当然<strong>我们还可以默认初始化迭代器，这样就创建了一个可以当做尾后值使用的迭代器</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">istream_iterator&lt;<span class="keyword">int</span>&gt; int_it(<span class="built_in">cin</span>);<span class="comment">//从cin读取int</span></span><br><span class="line">istream_iteratro&lt;<span class="keyword">int</span>&gt; int_eof;<span class="comment">//默认初始化，创建了一个可以当做尾后值使用的迭代器</span></span><br><span class="line"><span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">"afile"</span>)</span></span>;</span><br><span class="line">istream_iterator&lt;<span class="built_in">string</span>&gt; str_it(in);<span class="comment">//从"afile"读取文件字符串</span></span><br></pre></td></tr></table></figure><ul><li>istream_iterator<t> in(is)   in从输入流is读取的类型为T的值</t></li><li>istream_iterator<t> end;   读取类型为T值得istream_iterator迭代器，表示尾后位置</t></li><li>in1==in2   in1和in2必须读取相同类型。如果它们都是尾后迭代器或者绑定到相同的输入，那么二者相同</li><li>in1!=in2;</li><li>*in   返回从流中读取的值</li><li>in-&gt;men   与(*in).men的含义相同</li><li>++in,in++    使用元素类型所定义的&gt;&gt;运算符从输入流中读取下一个值。与以往一样，前置版本返回一个指向递增后迭代器的引用，后置版本返回旧值。</li></ul><h2 id="istream-iterator允许使用懒惰求值"><a href="#istream-iterator允许使用懒惰求值" class="headerlink" title="istream_iterator允许使用懒惰求值"></a>istream_iterator允许使用懒惰求值</h2><p>当我们将一个istream_iterator绑定到一个流的时候，标准库并不保证迭代器立即从流中读取数据。具体实现可以推迟从流中读取数据，直到我们使用迭代器的时候才真正读取。标准库中的实现所保证的是，在我们第一次解引用迭代器之前，从流中读取数据的操作已经完成了。</p><h2 id="ostream-iterator操作"><a href="#ostream-iterator操作" class="headerlink" title="ostream_iterator操作"></a>ostream_iterator操作</h2><p>在创建一个ostream_iterator时，我们可以提供（可选的）第二参数，它是一个字符串，在输出每个元素后都会打印此字符串。此字符串必须是一个c风格字符串。必须将ostream_iterator绑定到一个指定的流，不允许空的或者表示尾后位置的ostream_iterator。</p><ul><li><p>ostream_iterator<t> out(os)  out将类型为T的值写到输出流中</t></p></li><li><p>ostream_iterator<t> out(os,d)   out将类型为T的值写到输出流OS中，每个值后面都输出一个d。d指向一个空字符结尾的字符数组。</t></p></li><li><p>out=val;  用&lt;&lt;运算符将val写入到out所绑定的ostream中。val的类型必须与out可写的类型兼容</p></li><li><p>*out,++out,out++   这些运算符是存在的，但是不对out做任何事情。每个运算符都返回out</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ostream_iterator &lt;<span class="keyword">int</span>&gt; out_iter(<span class="built_in">cout</span>,<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> a:vec)</span><br><span class="line">    *out_iter++=e;<span class="comment">//赋值语句实际上将每个元素都写到cout</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p><strong>值得注意的是，当我们向out_iter赋值的时候，可以忽略解引用和递增运算</strong></p></li></ul><h2 id="反向迭代器-reverse-iterator"><a href="#反向迭代器-reverse-iterator" class="headerlink" title="反向迭代器 reverse_iterator"></a>反向迭代器 reverse_iterator</h2><p>反向迭代器就是在容器中从尾元素到首元素反向移动的迭代器。对于反向迭代器，递增的操作含义会颠倒过来。</p><p>注意crend(),rend(),crbegin(),rbegin()等</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第四周计划与总结</title>
      <link href="/2019/03/18/%E7%AC%AC%E5%9B%9B%E5%91%A8%E8%AE%A1%E5%88%92%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
      <url>/2019/03/18/%E7%AC%AC%E5%9B%9B%E5%91%A8%E8%AE%A1%E5%88%92%E4%B8%8E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="第四周计划"><a href="#第四周计划" class="headerlink" title="第四周计划"></a>第四周计划</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><h3 id="泛型算法"><a href="#泛型算法" class="headerlink" title="泛型算法"></a>泛型算法</h3><ul><li style="list-style: none"><input type="checkbox" checked> 定制操作</li><li style="list-style: none"><input type="checkbox" checked> 再探迭代器</li><li style="list-style: none"><input type="checkbox"> 泛型算法结构</li><li style="list-style: none"><input type="checkbox"> 特定容器算法</li></ul><h3 id="拷贝控制"><a href="#拷贝控制" class="headerlink" title="拷贝控制"></a>拷贝控制</h3><ul><li style="list-style: none"><input type="checkbox"> 拷贝、赋值与销毁</li><li style="list-style: none"><input type="checkbox"> 拷贝控制和资源管理</li></ul><h2 id="离散数学"><a href="#离散数学" class="headerlink" title="离散数学"></a>离散数学</h2><h3 id="离散数学及其应用"><a href="#离散数学及其应用" class="headerlink" title="离散数学及其应用"></a>离散数学及其应用</h3><ul><li style="list-style: none"><input type="checkbox" checked> 命题逻辑</li><li style="list-style: none"><input type="checkbox" checked> 命题逻辑的应用</li><li style="list-style: none"><input type="checkbox"> 命题等价式</li><li style="list-style: none"><input type="checkbox"> 谓词和量词</li><li style="list-style: none"><input type="checkbox"> 嵌套量词</li><li style="list-style: none"><input type="checkbox"> 推理规则</li><li style="list-style: none"><input type="checkbox"> 证明导论</li><li style="list-style: none"><input type="checkbox"> 证明的方法和策略</li></ul><h2 id="高等数学"><a href="#高等数学" class="headerlink" title="高等数学"></a>高等数学</h2><ul><li style="list-style: none"><input type="checkbox" checked> 8.3</li><li style="list-style: none"><input type="checkbox" checked> 8.4</li><li style="list-style: none"><input type="checkbox" checked> 9.3</li><li style="list-style: none"><input type="checkbox" checked> 9.4</li><li style="list-style: none"><input type="checkbox"> 9.5</li><li style="list-style: none"><input type="checkbox"> 9.6</li><li style="list-style: none"><input type="checkbox"> 9.7</li></ul><h2 id="英语六级"><a href="#英语六级" class="headerlink" title="英语六级"></a>英语六级</h2><ul><li style="list-style: none"><input type="checkbox" checked> Word List 1</li><li style="list-style: none"><input type="checkbox" checked> Word List 2</li><li style="list-style: none"><input type="checkbox" checked> Word List 3</li><li style="list-style: none"><input type="checkbox" checked> Word List 4</li><li style="list-style: none"><input type="checkbox" checked> Word List 5</li><li style="list-style: none"><input type="checkbox" checked> Word List 6</li><li style="list-style: none"><input type="checkbox" checked> Word List 7</li><li style="list-style: none"><input type="checkbox" checked> Word List 8</li><li style="list-style: none"><input type="checkbox" checked> Word List 9</li><li style="list-style: none"><input type="checkbox"> Word List 10</li><li style="list-style: none"><input type="checkbox"> Word List 11</li><li style="list-style: none"><input type="checkbox"> Word List 12</li><li style="list-style: none"><input type="checkbox"> Word List 13</li></ul><hr><h1 id="总结与反思"><a href="#总结与反思" class="headerlink" title="总结与反思"></a>总结与反思</h1><ul><li>要结合原版书籍进行阅读。这周在看《离散数学及其应用》的时候，一直卡在“蕴含”中的p仅当q。最后查阅相关网页才发现原来是译者在翻译的时候翻译错了。看来以后阅读专著需要结合英文原版书籍进行阅读了。长记性了</li><li>这周的睡眠情况有所好转，也没有感觉压力那么大了。每天都给自己留出来了放松的时间。（每天都有放空的时间，要控制好啊）感觉这一周没有干什么事。又感觉自己好忙。看来要在这周日之前完成所有没完成的任务，从下周开始重新做人了Emmm。<strong>我一定要在11点30之前上床睡觉</strong></li><li>这周见到了小导师。导师定了一个小目标“ACM”全国性质的奖（还有啥来着？！）。从下一周开始00就要学习新的课程了（数据结构和算法）。希望自己能在这学期结束之前看完。还有MySQL和Java。导师还强调了<strong>“边做边学”</strong>，还要提高自学能力。</li><li>作业一定要每节课下课以后立马做。不要拖到第二天，要不我准得忘。上课不能总是想着下课了。已经第四周了，还没有踏实下来。</li><li>这周自习情况。基本这一周没有怎么去上自习。下一周需要拉着小组成员去自习了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大一下计划与总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>泛型算法——定制操作</title>
      <link href="/2019/03/18/post%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E5%AE%9A%E5%88%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/03/18/post%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E5%AE%9A%E5%88%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="泛型算法——定制操作"><a href="#泛型算法——定制操作" class="headerlink" title="泛型算法——定制操作"></a>泛型算法——定制操作</h1><h2 id="谓词"><a href="#谓词" class="headerlink" title="谓词"></a>谓词</h2><p>谓词是一个可以调用的表达式，其返回的结果是一个能用作条件的值。</p><p>谓词分为一元谓词和二元谓词。</p><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><p>根据算法接受一元谓词还是二元谓词，我们传递给算法的谓词必须严格地接受一个或者两个参数。当需要传递多个值的时候，可以考虑用lambda表达式</p><p>我们可以向一个算法传递任何类别的可调用对象。对于一个对象或者一个表达式，如果可以对其使用调用运算符，则称它为可调用的。</p><p>我们可以将lambda表达式理解为一个未命名的内联函数，与任何函数类似，一个lambda表达式具有一个返回类型，一个参数列表和一个函数体，与函数不同，lambda可能定义在函数内部。一个lambda表达式具有如下形式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[capture <span class="built_in">list</span>](parameter <span class="built_in">list</span>)-&gt;<span class="keyword">return</span> type&#123;function body&#125;</span><br></pre></td></tr></table></figure><p>捕获列表是一个lambda所在函数中定义的局部变量的列表，通常为空。与普通函数不同的是，lambda必须使用尾置返回来指定返回类型。</p><p>我们可以忽略参数列表和返回类型，但是必须永远包含捕获列表和函数体</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> f=[]&#123;<span class="keyword">return</span> <span class="number">42</span>&#125;;</span><br></pre></td></tr></table></figure><p>此例中，我们定义了一个可调用对象f，它不接受参数，返回42.</p><p>lambda的调用方式和普通函数的调用方式相同，都是使用调用运算符。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;f()&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//Output 42</span></span><br></pre></td></tr></table></figure><p>如果忽略返回类型，lambda根据函数体中的代码推断出返回类型。如果函数体只是一个return语句，那么返回类型从返回的表达式的类型推断而来，否则，返回类型是void。如果函数体包含任何单一return语句之外的内容，并且未指定返回类型，则返回void。</p><h3 id="向lambda传递参数"><a href="#向lambda传递参数" class="headerlink" title="向lambda传递参数"></a>向lambda传递参数</h3><p>调用一个lambda时给定的实参用来初始化lambda的形参。但是，lambda不能有默认参数。空捕获列表表示此lambda不使用它所在的函数中任何的局部变量。</p><h3 id="使用捕获列表"><a href="#使用捕获列表" class="headerlink" title="使用捕获列表"></a>使用捕获列表</h3><p>虽然一个lambda可以出现在一个函数中，使用其局部变量，但<strong>它只能使用那些明确指明的变量</strong>。一个lambda通过将局部变量包含在其捕获列表中，来指出将会使用这些变量。捕获列表指引lambda在其内部包含访问局部变量所需要的信息。</p><p>lambda以一对[ ]开始，我们可以在其中提供一个逗号分隔名字列表，这些名字都是它<strong>所在函数中定义的</strong>。</p><p><strong>一个lambda只有在其捕获列表中捕获一个它所在函数中的局部变量，才能在函数体中使用该变量</strong></p><h2 id="lambda捕获和返回"><a href="#lambda捕获和返回" class="headerlink" title="lambda捕获和返回"></a>lambda捕获和返回</h2><p>当我们定义一个lambda时，编译器生成一个与lambda对应的新的（未命名的）类类型。目前，可以这样理解，当一个函数传递一个lambda时，同时定义了一个新类型和该类型的一个对象：传递的参数就是此编译器生成的类类型的未命名对象。类似的，当使用auto定义一个lambda初始化的变量时，定义了一个从lambda生成的类型的对象。</p><h3 id="值捕获"><a href="#值捕获" class="headerlink" title="值捕获"></a>值捕获</h3><p>类似于参数传递，变量的捕获方式也可以是值或者引用。我们的lambda采用值捕获的方式。与传值参数类似，采用值捕获的前提是变量可以拷贝。与参数不同，被捕获的变量的值在lambda创建时拷贝，而不是调用时拷贝。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fcn2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> v1=<span class="number">42</span>;</span><br><span class="line">    <span class="keyword">auto</span> f2=[v1]&#123;<span class="keyword">return</span> v1;&#125;;</span><br><span class="line">    v1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> j=f2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用捕获"><a href="#引用捕获" class="headerlink" title="引用捕获"></a>引用捕获</h3><p>需要注意的是，如果我们采用引用方式捕获一个变量，就需要确保被引用的对象在lambda执行的时候是存在的。lambda捕获的都是局部变量，这些变量在函数结束后就不复存在了。如果lambda可能在函数结束后执行，捕获的引用指向的局部变量已经消失。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fcn2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> v1=<span class="number">42</span>;</span><br><span class="line">    <span class="keyword">auto</span> f2=[&amp;v1]&#123;<span class="keyword">return</span> v1;&#125;;</span><br><span class="line">    v1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> j=f2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="隐式捕获"><a href="#隐式捕获" class="headerlink" title="隐式捕获"></a>隐式捕获</h3><p>除了显示列出我们希望使用的来自所在函数的变量之外，还可以让编译器根据lambda体中的代码来腿短我们要使用的变量。为了指示编译器推断捕获列表，应在捕获列表中写一个=或者&amp;。=表示值捕获，&amp;表示引用捕获。</p><p>如果我们希望对一部分变量采用值捕获，对其他变量采用引用捕获，可以混合使用隐式捕获和显式捕获</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&amp;,c]<span class="comment">//c显式捕获，值捕获方式，其他隐式捕获，引用方式</span></span><br><span class="line">[=,c]<span class="comment">//c显式捕获，引用捕获方式，其他隐式捕获，值捕获方式</span></span><br></pre></td></tr></table></figure><h3 id="lambda捕获列表总结"><a href="#lambda捕获列表总结" class="headerlink" title="lambda捕获列表总结"></a>lambda捕获列表总结</h3><ul><li style="list-style: none"><input type="checkbox"> 空捕获列表</li><li>[names]names是一个逗号分隔的名字列表，这些名字都是lambda所在函数的局部变量，默认情况下使用值捕获，如果名字前面加上了&amp;，就采用引用捕获</li><li>[&amp;]隐式捕获列表，采用引用捕获方式</li><li>[=]隐式捕获列表，采用值捕获方式</li><li>[&amp;,其他变量使用值捕获]</li><li>[=,其他变量使用引用捕获]</li></ul><h3 id="可变lambda"><a href="#可变lambda" class="headerlink" title="可变lambda"></a>可变lambda</h3><p>默认情况下，对于一个<strong>值被拷贝的变量</strong>（值捕获），lambda不会改变其值，（<strong>引用捕获是否可以修改取决于引用指向的是一个const还是一个非const </strong>）。如果我们希望能改变一个被捕获的变量的值，就必须在参数列表首加上关键字mutable。因此，可变lambda能省略参数列表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fcn3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> v1=<span class="number">42</span>;</span><br><span class="line">    <span class="keyword">auto</span> f2=[v1]()<span class="keyword">mutable</span>&#123;<span class="keyword">return</span> v1;&#125;;</span><br><span class="line">    v1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> j=f2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指定lambda返回类型"><a href="#指定lambda返回类型" class="headerlink" title="指定lambda返回类型"></a>指定lambda返回类型</h3><h2 id="参数绑定"><a href="#参数绑定" class="headerlink" title="参数绑定"></a>参数绑定</h2><p>对于那种只在一两个地方使用的简单操作，lambda表达式是最有用的。如果我们需要在很多地方使用相同的操作，通常应当定义一个函数，而不是多次编写相同的lambda表达式。类似的，如果一个操作需要许多语句才能完成，通常使用函数最好。如果lambda表达式的捕获列表为空，通常可以用函数来实现它。</p><h3 id="标准库bind函数"><a href="#标准库bind函数" class="headerlink" title="标准库bind函数"></a>标准库bind函数</h3><p>bind函数定义在头文件functional中，可以将函数bind看作一个通用的函数适配器，它接受一个可调用对象，生成一个新的可调用对象来“适应”原对象的参数列表</p><p>调用bind的一般形式为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> newCallable=bind(callable,arg_list);</span><br></pre></td></tr></table></figure><p>其中，newCallable本身是一个可以调用的对象，arg_list是一个逗号分隔符的参数列表，对应给定的参数Callable的参数。即，当我们调用newCallable时，newCallable会调用callable，并传递给它arg_list的参数</p><h3 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//check6是一个可调用对象，接受一个string类型的参数</span></span><br><span class="line"><span class="comment">//并用此string和值6来调用check_size</span></span><br><span class="line"><span class="keyword">auto</span> check6=bind(check_size,_1,<span class="number">6</span>);</span><br></pre></td></tr></table></figure><p>此bind调用只有一个占位符，表示check只接受单一参数。占位符出现在arg_list的第一个位置，表示check6的此参数对应check_size的第一个参数。这个参数是const string&amp;。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s=<span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">bool</span> b1=check6(s);<span class="comment">//check6(s)会调用check_size(s,6)</span></span><br></pre></td></tr></table></figure><p>bind生成一个可调用对象，将占位符的变量绑定到对应位置。</p><h3 id="使用placeholders名字"><a href="#使用placeholders名字" class="headerlink" title="使用placeholders名字"></a>使用placeholders名字</h3><p>名字_n都定义在一个名为placeholders的命名空间中，而这个命名空间本身定义在std命名空间中。为了使用这些名字，两个命名空间都要写上。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> namespace_name;</span><br></pre></td></tr></table></figure><h3 id="bind的参数"><a href="#bind的参数" class="headerlink" title="bind的参数"></a>bind的参数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> g=bind(f,a,b,_2,c,_1);</span><br></pre></td></tr></table></figure><p>生成了一个新的可调用对象，他有两个参数，分别用占位符_2和_1表示。这个新的可调用对象将自己的参数最为第三个和第五个参数传递给f。f的第一个第二个和第四个参数分别被绑定到给定值a.b.c上。</p><h3 id="用bind排参数顺序"><a href="#用bind排参数顺序" class="headerlink" title="用bind排参数顺序"></a>用bind排参数顺序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按照单词长度由短至长排列</span></span><br><span class="line">sort(words.begin(),words.end(),isShorter);</span><br><span class="line"><span class="comment">//按照单词长度由长至短排列</span></span><br><span class="line">sort(words.begin(),words.end(),bind(isShorter,_2,_1));</span><br></pre></td></tr></table></figure><h3 id="绑定引用参数"><a href="#绑定引用参数" class="headerlink" title="绑定引用参数"></a>绑定引用参数</h3><p>默认情况下，bind的那些不是占位符的参数被拷贝到bind返回的可调用对象中。但是与lambda表达式相似，有事对一些绑定的参数我们希望以引用方式传递，或者是要绑定参数的类型无法拷贝。这时，我们必须使用标准库ref()函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for_each(words.begin().words.end(),bind(print,ref(os),_1,<span class="string">' '</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三周计划与总结</title>
      <link href="/2019/03/17/%E7%AC%AC%E4%B8%89%E5%91%A8%E8%AE%A1%E5%88%92%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
      <url>/2019/03/17/%E7%AC%AC%E4%B8%89%E5%91%A8%E8%AE%A1%E5%88%92%E4%B8%8E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="英语六级"><a href="#英语六级" class="headerlink" title="英语六级"></a>英语六级</h2><ul><li style="list-style: none"><input type="checkbox" checked> Word List 9 </li><li style="list-style: none"><input type="checkbox" checked> Word List 10</li><li style="list-style: none"><input type="checkbox"> Word List 11</li><li style="list-style: none"><input type="checkbox"> Word List 12</li><li style="list-style: none"><input type="checkbox" checked> Word List 13</li></ul><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><ul><li style="list-style: none"><input type="checkbox" checked> 回顾类、IO库、顺序容器</li><li style="list-style: none"><input type="checkbox"> 泛型算法</li><li style="list-style: none"><input type="checkbox"> 关联容器</li><li style="list-style: none"><input type="checkbox"> 动态内存</li><li style="list-style: none"><input type="checkbox"> 拷贝复制</li><li style="list-style: none"><input type="checkbox" checked> 重载运算符与类型转换</li><li style="list-style: none"><input type="checkbox" checked> 理解函数对象</li><li style="list-style: none"><input type="checkbox"> lambda表达式</li><li style="list-style: none"><input type="checkbox"> STL算法</li><li style="list-style: none"><input type="checkbox"> Essential C++</li></ul><h2 id="离散数学及其应用"><a href="#离散数学及其应用" class="headerlink" title="离散数学及其应用"></a>离散数学及其应用</h2><ul><li style="list-style: none"><input type="checkbox"> 离散数学及其应用第一章</li></ul><h2 id="高等数学"><a href="#高等数学" class="headerlink" title="高等数学"></a>高等数学</h2><ul><li style="list-style: none"><input type="checkbox" checked> 9.1</li><li style="list-style: none"><input type="checkbox" checked> 9.2</li><li style="list-style: none"><input type="checkbox"> 9.3</li><li style="list-style: none"><input type="checkbox"> 9.4</li><li style="list-style: none"><input type="checkbox"> 9.5</li></ul><h2 id="MatLab"><a href="#MatLab" class="headerlink" title="MatLab"></a>MatLab</h2><ul><li style="list-style: none"><input type="checkbox" checked> 台大课程1</li><li style="list-style: none"><input type="checkbox" checked> 台大课程2</li><li style="list-style: none"><input type="checkbox" checked> 台大课程3</li><li style="list-style: none"><input type="checkbox" checked> 台大课程4</li><li style="list-style: none"><input type="checkbox" checked> 台大课程5</li><li style="list-style: none"><input type="checkbox"> 台大课程6</li><li style="list-style: none"><input type="checkbox"> 台大课程7</li></ul><hr><h1 id="总结与反思"><a href="#总结与反思" class="headerlink" title="总结与反思"></a>总结与反思</h1><ul><li>这一周的任务明显比较多。加之创新创业大赛的准备，压力实在是大。睡眠时间和睡眠质量有所下降。看来需要熄灯就躺在床上了。</li><li>C++感到了卡壳。看来不能囫囵吞枣。要多写代码多实践。下一周再回顾之前的内容叭。</li><li>虽然定了好多目标，但是没有完成多少，反而给自己带来了不小压力。状态急剧下降。看来下一周制定计划要按照实际了。</li><li>调整心态。平常听歌不能听躁的了，不然更没办法学习了。近期先听一些舒缓的吧。</li><li>还是感觉大学物理好难啊！</li><li><strong>我是真的明白了“欲速则不达”</strong>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大一下计划与总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>泛型算法</title>
      <link href="/2019/03/12/%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95/"/>
      <url>/2019/03/12/%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="泛型算法"><a href="#泛型算法" class="headerlink" title="泛型算法"></a>泛型算法</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>泛型算法之所以被称为是“泛型算法”是因为它们可以被用于不同类型的元素和多种容器类型（不仅包括标准库类型，比如vector或list，还包括内置的数组类型）</p><p>大多数算法都被定义在头文件algorithm中，标准库头文件numeric中定义了一组数值泛型算法</p><h2 id="初识泛型算法"><a href="#初识泛型算法" class="headerlink" title="初识泛型算法"></a>初识泛型算法</h2><p>除了少数例外，标准库算法都对一个范围内的元素进行操作，我们将此元素范围称为“输入范围”。<strong>接受输入范围的算法总是使用前两个参数来表示此范围，两个参数分别是指向要处理的第一个元素和尾元素之后位置的迭代器</strong></p><h3 id="只读算法"><a href="#只读算法" class="headerlink" title="只读算法"></a>只读算法</h3><p>只读取输入范围内的元素，而从不改变其元素</p><h3 id="迭代器参数"><a href="#迭代器参数" class="headerlink" title="迭代器参数"></a>迭代器参数</h3><p>一些算法从两个序列中读取元素。构成这两个序列的元素可以来自不同类型的容器。例如，第一个序列可能保存于一个vector中，第二个序列可能保存于一个list、deque、内置数组或其他容器中。而且<strong>两个序列中的元素类型不要求严格匹配</strong></p><p><strong>用一个单一迭代器表示第二个序列的算法都假定第二个序列至少于第一个一样长。确保算法不会试图访问第二个序列中不存在的元素是程序员的责任</strong></p><h3 id="算法不检查写操作"><a href="#算法不检查写操作" class="headerlink" title="算法不检查写操作"></a>算法不检查写操作</h3><p><strong>需要注意的是，向目的位置迭代器写入数据的算法假定目的位置足够大，能够容纳写入的元素</strong></p><p>一个初学者非常容易犯的错误是在一个空容器上调用fill_n（或者类似的写元素的写法）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; vec;<span class="comment">//空向量</span></span><br><span class="line"><span class="comment">//灾难：修改vec中的10个（不存在的元素）</span></span><br><span class="line">fill_n(vec.begin(),<span class="number">10</span>,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="back-inserter插入迭代器"><a href="#back-inserter插入迭代器" class="headerlink" title="back_inserter插入迭代器"></a>back_inserter插入迭代器</h3><p>一种保证算法有足够元素空间来容纳输出数据的方法是使用<strong>插入迭代器</strong>。插入迭代器是一种向容器中添加元素的迭代器。back_inserter接受一个指向容器的引用，返回一个与该容器绑定的插入迭代器。当我们通过次迭代器赋值时，赋值运算符会调用push_back将一个具有给定值的元素添加到容器中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; vec;<span class="comment">//空向量</span></span><br><span class="line"><span class="keyword">auto</span> it=back_inserter(vec);<span class="comment">//通过it赋值会将元素添加到vec中</span></span><br><span class="line">*it=<span class="number">42</span>；<span class="comment">//vev中现在有一个元素，值为42</span></span><br></pre></td></tr></table></figure><p>通过使用back_inserter插入迭代器，就可以尽量减少因“算法不检查写操作”而产生的错误。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; vec;<span class="comment">//空向量</span></span><br><span class="line"><span class="comment">//正确：back_inserter创建一个迭代器，可以用来向vec添加元素</span></span><br><span class="line">fill_n(back_inserter(vec),<span class="number">10</span>,<span class="number">0</span>);<span class="comment">//添加10个元素到vec中</span></span><br></pre></td></tr></table></figure><h3 id="拷贝算法"><a href="#拷贝算法" class="headerlink" title="拷贝算法"></a>拷贝算法</h3><p>需要注意的是，传递给copy的目的序列至少要包含与输入序列一样多的元素，这点很重要。</p><p>replace算法：读入一个序列，并将其中所有等于给定值的元素都改为另一个值</p><p>replace_copy算法：读入一个序列，将其中所有给定的值都改为另一个值，并储存在另一序列中，原序列保持不变。</p><h3 id="重排元素的算法sort"><a href="#重排元素的算法sort" class="headerlink" title="重排元素的算法sort()"></a>重排元素的算法sort()</h3><h3 id="可以将相邻相消除的算法unique"><a href="#可以将相邻相消除的算法unique" class="headerlink" title="可以将相邻相消除的算法unique()"></a>可以将相邻相消除的算法unique()</h3><p>需要注意的是，unique并不真的删除任何元素，它只是覆盖相邻的重复元素，使得不重复元素出现在序列开始部分，unique返回的迭代器只想最后一个不重复元素之后的位置。</p><h3 id="使用容器操作删除元素erase"><a href="#使用容器操作删除元素erase" class="headerlink" title="使用容器操作删除元素erase()"></a>使用容器操作删除元素erase()</h3><p>erase(it);</p><p>erase(it.begin(),it.end());</p><h2 id="定制操作"><a href="#定制操作" class="headerlink" title="定制操作"></a>定制操作</h2>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前置++和后置++的区别</title>
      <link href="/2019/03/10/%E5%89%8D%E7%BD%AE-%E5%92%8C%E5%90%8E%E7%BD%AE-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/03/10/%E5%89%8D%E7%BD%AE-%E5%92%8C%E5%90%8E%E7%BD%AE-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>int a = 0;<br>++ a;   //前置++<br>a++;    //后置++</p><p>《C专家编程》中有如下描述（P276，人民邮电出版社）：</p><ul><li><p>++a表示取a的地址，增加它的内容，然后把值放在寄存器中；</p></li><li><p>a++表示取a的地址，把它的值装入寄存器，然后增加内存中的a的值；</p></li></ul><p>另外，网上找了篇文章，通过从运算符重载的角度来探讨他们的不同，如下：</p><p>假设有一个类Age，描述年龄。该类重载了前置++和后置++两个操作符，以实现对年龄的自增。</p><pre><code>class Age   {   public:       Age&amp; operator++() //前置++       {           ++i;           return *this;       }       const Age operator++(int) //后置++       {           Age tmp = *this;           ++(*this);  //利用前置++           return tmp;       }       Age&amp; operator=(int i) //赋值操作       {           this-&gt;i = i;           return *this;       }   private:       int i;   };  </code></pre><p>从上述代码，我们可以看出前置++和后置++，有几点不同：</p><ul><li>返回类型不同</li><li>形参不同</li><li>代码不同</li><li>效率不同</li><li>返回值类型的区别</li></ul><p>前置++的返回类型是Age&amp;，后置++的返回类型const Age。这意味着，前置++返回的是左值，后置++返回的是右值。</p><p><strong>左值和右值，决定了前置++和后置++的用法。</strong></p><pre><code>int main()   {       Age a;       (a++)++;  //编译错误       ++(a++);  //编译错误       a++ = 1;  //编译错误       (++a)++;  //OK       ++(++a);  //OK       ++a = 1;  //OK   }  </code></pre><ul><li><p>++的类型是const Age，自然不能对它进行前置++、后置++、赋值等操作。</p></li><li><p>++a的类型是Age&amp;，当然可以对它进行前置++、后置++、赋值等操作</p></li></ul><h2 id="Q-a-的返回类型为什么要是const对象呢？"><a href="#Q-a-的返回类型为什么要是const对象呢？" class="headerlink" title="Q :a++的返回类型为什么要是const对象呢？"></a>Q :a++的返回类型为什么要是const对象呢？</h2><p>有两个原因：</p><ul><li>如果不是const对象，a(++)++这样的表达式就可以通过编译。但是，<strong>其效果却违反了我们的直觉 。a其实只增加了1，因为第二次自增作用在一个临时对象上。</strong></li><li>另外，对于内置类型，(i++)++这样的表达式是不能通过编译的。自定义类型的操作符重载，应该与内置类型保持行为一致 。<br><strong>a++的返回类型如果改成非const对象，肯定能通过编译，但是我们最好不要这样做。</strong></li></ul><h2 id="Q-a的返回类型为什么是引用呢？"><a href="#Q-a的返回类型为什么是引用呢？" class="headerlink" title="Q :++a的返回类型为什么是引用呢？"></a>Q :++a的返回类型为什么是引用呢？</h2><p>这样做的原因应该就是：与内置类型的行为保持一致。前置++返回的总是被自增的对象本身。因此，++(++a)的效果就是a被自增两次。</p><h2 id="形参的区别"><a href="#形参的区别" class="headerlink" title="形参的区别"></a>形参的区别</h2><p>前置++没有形参，而后置++有一个int形参，但是该形参也没有被用到。很奇怪，难道有什么特殊的用意？</p><p>其实也没有特殊的用意，只是为了绕过语法的限制。</p><p>前置++与后置++的操作符重载函数，函数原型必须不同。否则就违反了“重载函数必须拥有不同的函数原型”的语法规定。</p><p>虽然前置++与后置++的返回类型不同，但是返回类型不属于函数原型。为了绕过语法限制，只好给后置++增加了一个int形参。</p><p>原因就是这么简单，真的没其他特殊用意。其实，给前置++增加形参也可以；增加一个double形参而不是int形参，也可以。只是，当时就这么决定了。</p><h2 id="代码实现的区别"><a href="#代码实现的区别" class="headerlink" title="代码实现的区别"></a>代码实现的区别</h2><p>前置++的实现比较简单，自增之后，将*this返回即可。需要注意的是，一定要返回*this。</p><p>后置++的实现稍微麻烦一些。因为要返回自增之前的对象，所以先将对象拷贝一份，再进行自增，最后返回那个拷贝。</p><p>在Age的代码中，后置++利用了前置++来实现自增。这样做是为了避免“自增的代码”重复。</p><p>在本例中，自增的代码很简单，就是一行++i，没有必要这样做。但是在其它自增逻辑复杂的例子中，这么做还是很有必要的。</p><h2 id="效率的区别"><a href="#效率的区别" class="headerlink" title="效率的区别"></a>效率的区别</h2><p>如果不需要返回自增之前的值，那么前置++和后置++的计算效果都一样。但是，我们仍然应该优先使用前置++，尤其是对于用户自定义类型的自增操作。</p><p>前置++的效率更高，理由是：后置++会生成临时对象。</p><p>从Age的后置++的代码实现也可以看出这一点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Age <span class="keyword">operator</span>++(<span class="keyword">int</span>) <span class="comment">//后置++   </span></span><br><span class="line">&#123; </span><br><span class="line">    Age tmp = *<span class="keyword">this</span>;   </span><br><span class="line">    ++(*<span class="keyword">this</span>);  <span class="comment">//利用前置++   </span></span><br><span class="line"><span class="keyword">return</span> tmp;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显，tmp是一个临时对象，会造成一次构造函数和一次析构函数的额外开销。虽然，编译器在某些情况下可以优化掉这些开销。但是，我们最好不要依赖编译器的行为。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>运算符重载</title>
      <link href="/2019/03/10/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
      <url>/2019/03/10/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="单目运算符"><a href="#单目运算符" class="headerlink" title="单目运算符"></a>单目运算符</h2><p>作为类成员的（非静态函数）的单目运算符没有参数，因为它们使用的唯一的参数是当前实例（*this），如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">return_type <span class="keyword">operator</span> <span class="title">operator_type</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">///...implementation</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单目递增运算符和单目递减运算符"><a href="#单目递增运算符和单目递减运算符" class="headerlink" title="单目递增运算符和单目递减运算符"></a>单目递增运算符和单目递减运算符</h3><p>前置形式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A&amp; <span class="keyword">operator</span> ++()&#123;</span><br><span class="line">    <span class="comment">//operator implementation code</span></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后置形式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A <span class="keyword">operator</span> ++(<span class="keyword">int</span>)&#123;</span><br><span class="line">    <span class="comment">//Store a copy of the current state of the object, before incrementing</span></span><br><span class="line">    <span class="function">A <span class="title">copy</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">    <span class="comment">//increment implementation code</span></span><br><span class="line">    <span class="comment">//一般我们可以写++A;从而利用之前定义声明过的前置形式</span></span><br><span class="line">    <span class="comment">//return state before increment</span></span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后置单目运算符函数需要一个不参与运算的整型形参，用作重载识别，操作数是类对象<strong>const Clock</strong> <strong>operator++(int)</strong> //后置++，返回操作数的局部变量的常副本（此处的int是一个哑元，，哑元就是只有类型没有名称的参数，它用来区别不同的函数，比如这里的前++和后++。）</p><h3 id="Q-为什么前-函数的返回值是一个引用，后-函数返回的是一个const"><a href="#Q-为什么前-函数的返回值是一个引用，后-函数返回的是一个const" class="headerlink" title="Q:为什么前++函数的返回值是一个引用，后++函数返回的是一个const"></a>Q:为什么前++函数的返回值是一个引用，后++函数返回的是一个const</h3><p>A：在规则上，前++是可以连续使用（单目递增运算符的结合性时从右到左，所以前置++可以连续使用），当我们只是一次++时，是要返回一个值的，既然能够使用，所以这个值我们是可以拿过来修改的，同理，既然后++不能连用，这就意味着其返回值是不能修改的。</p><h3 id="转换运算符"><a href="#转换运算符" class="headerlink" title="转换运算符"></a>转换运算符</h3><p>若有类A，运行如下代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A a;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a;</span><br></pre></td></tr></table></figure><p>编译器会报错，因为cout不知道如何解读A实例，因为A类不支持这样的运算符，即将A对象的内容转换成cout能够接受的类型。</p><p>然而，要让cout能够很好地显示const char*</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello world"</span>;</span><br></pre></td></tr></table></figure><p>因此，要让cout能够显示A对象，只需要添加一个返回const char*的运算符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">operator</span> <span class="keyword">const</span> <span class="keyword">char</span>*()&#123;</span><br><span class="line">    <span class="comment">//operator implementation that returns a char*</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> day, month, year;</span><br><span class="line"><span class="built_in">string</span> dateInString;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Date(<span class="keyword">int</span> inMonth, <span class="keyword">int</span> inDay, <span class="keyword">int</span> inYear) :month(inMonth), day(inDay), year(inYear) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">operator</span> <span class="keyword">const</span> <span class="keyword">char</span>* () &#123;</span><br><span class="line"><span class="built_in">ostringstream</span> formattedDate;</span><br><span class="line">formattedDate &lt;&lt; month &lt;&lt; <span class="string">"/"</span> &lt;&lt; day &lt;&lt; <span class="string">"/"</span> &lt;&lt; year;</span><br><span class="line"></span><br><span class="line">dateInString = formattedDate.str();</span><br><span class="line"><span class="keyword">return</span> dateInString.c_str();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">Date <span class="title">Holiday</span><span class="params">(<span class="number">12</span>, <span class="number">25</span>, <span class="number">2016</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Holiday is on"</span> &lt;&lt; Holiday &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>这样的赋值将导致隐式转换，即为了让复制通过编译而不引发错误，编译器使用了可用的转换运算符（这里是const char*），为了禁止隐式转换，可以再运算符声明开头使用关键字explicit，如下所示</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="keyword">const</span> <span class="keyword">char</span>*()&#123;</span><br><span class="line">    <span class="comment">//conversion code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用关键字explicit，可以要求程序员使用强制类型装换来确认转换意图</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">strHoliday</span><span class="params">(<span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">char</span>*&gt;(Holiday))</span></span>;</span><br><span class="line">strHoliday=<span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">char</span>*&gt;(Date(<span class="number">11</span>,<span class="number">11</span>,<span class="number">2016</span>));</span><br></pre></td></tr></table></figure><p>应当根据类的可能用法编写尽可能多的运算符，如果应用程序需要Date对象的整数表示，可编写如下运算符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> day+month+year;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样便可以将Date对象当做整数来使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FuncTakesInt(<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(Date(<span class="number">12</span>,<span class="number">25</span>,<span class="number">2016</span>)))</span><br></pre></td></tr></table></figure><h3 id="解除引用运算符（-）和成员选择运算符（-gt-）"><a href="#解除引用运算符（-）和成员选择运算符（-gt-）" class="headerlink" title="解除引用运算符（*）和成员选择运算符（-&gt;）"></a>解除引用运算符（*）和成员选择运算符（-&gt;）</h3><p>二者在智能指针编程中应用最广。示例程序如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> day, month, year;</span><br><span class="line"><span class="built_in">string</span> dateInString;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Date(<span class="keyword">int</span> inMonth, <span class="keyword">int</span> inDay, <span class="keyword">int</span> inYear) :month(inMonth), day(inDay), year(inYear) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">DisplayDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; month &lt;&lt; <span class="string">"/"</span> &lt;&lt; day &lt;&lt; <span class="string">"/"</span> &lt;&lt; year &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">unique_ptr</span>&lt;<span class="keyword">int</span>&gt; smartIntPtr(<span class="keyword">new</span> <span class="keyword">int</span>);</span><br><span class="line">*smartIntPtr = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Use smart pointer type like an int*</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Integer value is "</span> &lt;&lt; *smartIntPtr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">unique_ptr</span>&lt;Date&gt; smartHoliday(<span class="keyword">new</span> Date(<span class="number">12</span>, <span class="number">25</span>, <span class="number">2016</span>));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"The new instance of date contains"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//use smartHoliday just as you would a Date</span></span><br><span class="line">smartHoliday-&gt;DisplayDate();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体情况将在智能指针进行讨论</p><h2 id="双目运算符"><a href="#双目运算符" class="headerlink" title="双目运算符"></a>双目运算符</h2><p>以全局函数或者静态成员函数的方式实现的双目运算符的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">return_type <span class="title">operator_type</span> <span class="params">(parameter1,parameter2)</span></span>;</span><br></pre></td></tr></table></figure><p>以类成员的方式实现的双目运算符的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">return_type <span class="title">operator_type</span> <span class="params">(parameter)</span></span>;</span><br></pre></td></tr></table></figure><p>以类成员的方式实现的双目运算符只接收一个参数，其原因是第二个参数通常是从类属性获得的。</p><h3 id="双目加法和双目减法运算符"><a href="#双目加法和双目减法运算符" class="headerlink" title="双目加法和双目减法运算符"></a>双目加法和双目减法运算符</h3><p>实例代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> day, month, year;</span><br><span class="line"><span class="built_in">string</span> dateInString;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Date(<span class="keyword">int</span> inMonth, <span class="keyword">int</span> inDay, <span class="keyword">int</span> inYear) :month(inMonth), day(inDay), year(inYear) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">Date <span class="keyword">operator</span> + (<span class="keyword">int</span> daysToAdd) &#123;</span><br><span class="line"><span class="function">Date <span class="title">newDate</span><span class="params">(month, day + daysToAdd, year)</span></span>;</span><br><span class="line"><span class="keyword">return</span> newDate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Date <span class="keyword">operator</span> - (<span class="keyword">int</span> dayToSub) &#123;</span><br><span class="line"><span class="keyword">return</span> Date(month, day - dayToSub, year);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Display</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; month &lt;&lt; <span class="string">"/"</span> &lt;&lt; day &lt;&lt; <span class="string">"/"</span> &lt;&lt; year &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">Date <span class="title">Holiday</span><span class="params">(<span class="number">12</span>, <span class="number">25</span>, <span class="number">2016</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Holiday on "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Holiday.Display();</span><br><span class="line"></span><br><span class="line"><span class="function">Date <span class="title">PreviousHoliday</span><span class="params">(Holiday - <span class="number">19</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Previous holiday on "</span>;</span><br><span class="line">PreviousHoliday.Display();</span><br><span class="line"></span><br><span class="line"><span class="function">Date <span class="title">NextHoliday</span><span class="params">(Holiday + <span class="number">6</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Next holiday on:"</span>;</span><br><span class="line">NextHoliday.Display();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="op-运算符重载"><a href="#op-运算符重载" class="headerlink" title="op=运算符重载"></a>op=运算符重载</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> day, month, year;</span><br><span class="line"><span class="built_in">string</span> dateInString;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Date(<span class="keyword">int</span> inMonth, <span class="keyword">int</span> inDay, <span class="keyword">int</span> inYear) :month(inMonth), day(inDay), year(inYear) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">Date <span class="keyword">operator</span> + (<span class="keyword">int</span> daysToAdd) &#123;</span><br><span class="line"><span class="function">Date <span class="title">newDate</span><span class="params">(month, day + daysToAdd, year)</span></span>;</span><br><span class="line"><span class="keyword">return</span> newDate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Date <span class="keyword">operator</span> - (<span class="keyword">int</span> dayToSub) &#123;</span><br><span class="line"><span class="keyword">return</span> Date(month, day - dayToSub, year);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Display</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; month &lt;&lt; <span class="string">"/"</span> &lt;&lt; day &lt;&lt; <span class="string">"/"</span> &lt;&lt; year &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>+=(<span class="keyword">int</span> DayToAdd)&#123;</span><br><span class="line">day=+DayToAdd;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//and so on </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="运算符和-运算符重载"><a href="#运算符和-运算符重载" class="headerlink" title="==运算符和!=运算符重载"></a>==运算符和!=运算符重载</h3><p>等于运算符的通用实现如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> ClassType&amp; compareTo)&#123;</span><br><span class="line">    <span class="comment">//comparison code here, return true if equal else here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现不等运算符时，可重用等于运算符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> ClassType&amp; compareTo)&#123;</span><br><span class="line">    <span class="comment">//comparision code here, return true if equal else false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> day, month, year;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Date(<span class="keyword">int</span> inMonth, <span class="keyword">int</span> inDay, <span class="keyword">int</span> inYear) :month(inMonth),day(inDay),year(inYear)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Date&amp; compareTo) &#123;</span><br><span class="line"><span class="keyword">return</span> ((day == compareTo.day) &amp;&amp; (month == compareTo.month) &amp;&amp; (year == compareTo.year));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> Date&amp; compareTo) &#123;</span><br><span class="line"><span class="keyword">return</span> !(<span class="keyword">this</span>-&gt;<span class="keyword">operator</span>==(compareTo));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispalyDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; month &lt;&lt; <span class="string">"/"</span> &lt;&lt; day &lt;&lt; <span class="string">"/"</span> &lt;&lt; year &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">Date <span class="title">holiday1</span><span class="params">(<span class="number">12</span>, <span class="number">25</span>, <span class="number">2016</span>)</span></span>;</span><br><span class="line"><span class="function">Date <span class="title">holiday2</span><span class="params">(<span class="number">12</span>, <span class="number">31</span>, <span class="number">2016</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"holiday 1 is "</span>;</span><br><span class="line">holiday1.DispalyDate();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"holiday 2 is "</span>;</span><br><span class="line">holiday2.DispalyDate();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (holiday1 == holiday2)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Equality operator: The two are on the same day"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Equality operator: The two are on different days"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (holiday1 != holiday2)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Inequality operator: The two are on different days"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Inequality operator: The two are on the same day"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> Date&amp; compareTo) &#123;</span><br><span class="line"><span class="keyword">return</span> !(<span class="keyword">this</span>-&gt;<span class="keyword">operator</span>==(compareTo));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这条return语句中，this-&gt;operator==()，其实相当于调用了bool operator == (const Date&amp; compareTo)，根据函数和地址的关系。（C++Primer： 当我们把函数名作为一个值使用的时，该函数自动的转化成指针）</p><h3 id="重载复制赋值运算符"><a href="#重载复制赋值运算符" class="headerlink" title="重载复制赋值运算符"></a>重载复制赋值运算符</h3><p>有时候，需要将一个类实例的内容赋给另一个类实例，如下所示</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Date <span class="title">holiday</span><span class="params">(<span class="number">12</span>,<span class="number">25</span>,<span class="number">2016</span>)</span></span>;</span><br><span class="line"><span class="function">Date <span class="title">anotherHoliday</span><span class="params">(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2017</span>)</span></span>;</span><br><span class="line">anotherHoliday=holiday;</span><br></pre></td></tr></table></figure><p>如果您没有提供复制赋值运算符，这将调用编译器自动给类添加的默认复制赋值运算符（浅复制）。为了确保进行深复制，您需要提供复制赋值运算符。</p><h2 id="下标运算符"><a href="#下标运算符" class="headerlink" title="下标运算符"></a>下标运算符</h2><p>下标运算符让您能够像访问数组那样访问类，典型语法如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return_type &amp; <span class="keyword">operator</span> [] (subscript_type &amp; subscript);</span><br></pre></td></tr></table></figure><p>示例程序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span>* buffer;</span><br><span class="line"></span><br><span class="line"><span class="comment">//private default constructor</span></span><br><span class="line">MyString()&#123;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//constructor</span></span><br><span class="line">MyString(<span class="keyword">const</span> <span class="keyword">char</span>* initialInput) &#123;</span><br><span class="line"><span class="keyword">if</span> (initialInput != <span class="literal">NULL</span>) &#123;</span><br><span class="line">buffer = <span class="keyword">new</span> <span class="keyword">char</span>(<span class="built_in">strlen</span>(initialInput) + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(buffer, initialInput);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">buffer = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//copy constructor</span></span><br><span class="line">MyString(<span class="keyword">const</span> MyString&amp; copySource);</span><br><span class="line"></span><br><span class="line">MyString&amp; <span class="keyword">operator</span> =(<span class="keyword">const</span> MyString&amp; copySource);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>&amp; <span class="keyword">operator</span> [](<span class="keyword">int</span> index) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; GetLength())</span><br><span class="line"><span class="keyword">return</span> buffer[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Destructor</span></span><br><span class="line">~MyString() &#123;</span><br><span class="line"><span class="keyword">if</span> (buffer != <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">delete</span>[]buffer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLength</span><span class="params">()</span><span class="keyword">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strlen</span>(buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">operator</span> <span class="keyword">const</span> <span class="keyword">char</span>* () &#123;</span><br><span class="line"><span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Type a statement:"</span>;</span><br><span class="line"><span class="built_in">string</span> strInput;</span><br><span class="line">getline(<span class="built_in">cin</span>, strInput);</span><br><span class="line"></span><br><span class="line"><span class="function">MyString <span class="title">youSaid</span><span class="params">(strInput.c_str())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Using operator[] for displaying your input"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; youSaid.GetLength(); ++index)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; youSaid[index] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter index 0 - "</span> &lt;&lt; youSaid.GetLength() - <span class="number">1</span> &lt;&lt; <span class="string">":"</span>;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Input character at zero-based position"</span> &lt;&lt; index;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" is:"</span> &lt;&lt; youSaid[index] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数运算符operator"><a href="#函数运算符operator" class="headerlink" title="函数运算符operator()"></a>函数运算符operator()</h2><p>operator()让对象更象函数，被称为函数运算符。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Display</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operator</span> <span class="params">()</span><span class="params">(<span class="built_in">string</span> input)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; input &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Display displayFuncObj;</span><br><span class="line"></span><br><span class="line"><span class="comment">//equivalent to displayFuncObj.operator()("Display this string");</span></span><br><span class="line">displayFuncObj(<span class="string">"Dispaly this string"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意到之所以能够将对象displayFuncObj用作函数，是因为编译器隐式地将它转化为对函数operator()的调用</strong></p><h2 id="用户定义的字面量"><a href="#用户定义的字面量" class="headerlink" title="用户定义的字面量"></a>用户定义的字面量</h2><p>要定义字面量，可以像下面这样定义operator””</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Return_type <span class="keyword">operator</span> <span class="string">""</span> YourLiteral(ValueType value)&#123;</span><br><span class="line"><span class="comment">//conversion code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例程序如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Temperature</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> Kelvin;</span><br><span class="line">Temperature(<span class="keyword">long</span> <span class="keyword">double</span> kelvin):Kelvin(kelvin)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Temperature <span class="keyword">operator</span><span class="string">""</span> _C(<span class="keyword">long</span> <span class="keyword">double</span> celcius) &#123;</span><br><span class="line"><span class="keyword">return</span> Temperature(celcius + <span class="number">273</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Temperature <span class="keyword">operator</span><span class="string">""</span> _F(<span class="keyword">long</span> <span class="keyword">double</span> fahrenheit) &#123;</span><br><span class="line"><span class="keyword">return</span> Temperature((fahrenheit + <span class="number">459.67</span>) * <span class="number">5</span> / <span class="number">9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Temperature k1 = <span class="number">31.73</span>_F;</span><br><span class="line">Temperature k2 = <span class="number">0.0</span>_C;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"k1 is "</span> &lt;&lt; k1.Kelvin &lt;&lt; <span class="string">" Kelvin"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"k2 is "</span> &lt;&lt; k2.Kelvin &lt;&lt; <span class="string">" Kelvin"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>类-使用构造函数进行类型转换</title>
      <link href="/2019/03/10/%E7%B1%BB-%E4%BD%BF%E7%94%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%BF%9B%E8%A1%8C%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>/2019/03/10/%E7%B1%BB-%E4%BD%BF%E7%94%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%BF%9B%E8%A1%8C%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>请看下面的Human类，它包含一个将整数作为参数的重载构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Human(<span class="keyword">int</span> humansAge):age(humansAge)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Function that takes a Human as a parameter</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoSomething</span><span class="params">(Human person)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Human sent did something"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个构造函数让您执行下面的转换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Humain <span class="title">kid</span><span class="params">(<span class="number">10</span>)</span></span>;<span class="comment">//convert integer in to a Human</span></span><br><span class="line">DoSomething(kid);</span><br></pre></td></tr></table></figure><h2 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h2><p>这样的转换构造函数能够让您执行隐式转换：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Human anotherKid=<span class="number">11</span>;</span><br><span class="line">DoSomething(<span class="number">10</span>);<span class="comment">//10 convert to a Human!</span></span><br></pre></td></tr></table></figure><p>函数DoSomething(Human person)被声明为接受一个Human（而不是int）参数！前面的代码为何可行呢？这是因为编译器知道Human类包含一个将整数作为参数的构造函数，进而替您执行了隐式转换：**将您提供的整数作为参数发送给这个构造函数，从而创建一个Human对象。</p><p>为了避免隐式转换，<strong>可以在声明构造函数的时候使用关键字explict</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    explicit Human(int humansAge):age(humansAge)&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>并非必须使用关键字explicit，但是在很多情况下，这都是一种良好的编程实践。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>类-只能有一个实例的单例类</title>
      <link href="/2019/03/10/%E7%B1%BB-%E5%8F%AA%E8%83%BD%E6%9C%89%E4%B8%80%E4%B8%AA%E5%AE%9E%E4%BE%8B%E7%9A%84%E5%8D%95%E4%BE%8B%E7%B1%BB/"/>
      <url>/2019/03/10/%E7%B1%BB-%E5%8F%AA%E8%83%BD%E6%9C%89%E4%B8%80%E4%B8%AA%E5%AE%9E%E4%BE%8B%E7%9A%84%E5%8D%95%E4%BE%8B%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p><a href>不允许复制的类</a> 中讨论的President类很不错，但是有一个缺陷：无法禁止通过实例化多个对象来创建多名总统。</p><p>由于复制构造是私有的，其中的每个对象都是不可复制的，但是您的目标是确保President类有且仅有一个化身，即有了一个President对象以后，就禁止创建其他的President对象。要实现这种功能强大的模式，可以使用单例类的概念，它使用私有的构造函数，私有赋值运算符和静态实例成员。</p><p>要创建单例类，关键字static必不可少。</p><h2 id="关键字static"><a href="#关键字static" class="headerlink" title="关键字static"></a>关键字static</h2><blockquote><ul><li>static用于类的数据成员时，该数据成员将在所有的实例之间共享</li><li>static用于函数中声明的局部变量时，该变量的值将在两次调用之间保持不变</li><li>static用于成员函数（方法）时，该方法在所有成员之间进行共享</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">President</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">President() &#123;&#125;;<span class="comment">//private default constructor</span></span><br><span class="line">President(<span class="keyword">const</span> President&amp;);<span class="comment">//private copy constructor</span></span><br><span class="line"><span class="keyword">const</span> President&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> President&amp;);<span class="comment">//assignment operator</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> President&amp; <span class="title">GetInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//static objects are constructed only once</span></span><br><span class="line"><span class="keyword">static</span> President onlyInstance;<span class="comment">//onlyPresident是一个局部变量，这样在以后调用这个函数的时候，返回的都是onlyInstance这个实例。</span></span><br><span class="line"><span class="keyword">return</span> onlyInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span>  <span class="title">GetName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetName</span><span class="params">(<span class="built_in">string</span> InputName)</span> </span>&#123;</span><br><span class="line">name = InputName;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">President&amp; onlyPresident = President::GetInstance();</span><br><span class="line">onlyPresident.SetName(<span class="string">"Abraham Lincoln"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//uncomment lines to see how compile failures prohibit duplicates</span></span><br><span class="line"><span class="comment">//President second;//cannot access constructor</span></span><br><span class="line"><span class="comment">//President * third=new President();//cannot access constructor</span></span><br><span class="line"><span class="comment">//President fourth=onlyPresident;//cannot access copy constructor</span></span><br><span class="line"><span class="comment">//onlyPresident=President::GetInstance();//connot access operator = </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"The name of the President is:"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; President::GetInstance().GetName() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>类-不允许复制的类</title>
      <link href="/2019/03/10/%E7%B1%BB-%E4%B8%8D%E5%85%81%E8%AE%B8%E5%A4%8D%E5%88%B6%E7%9A%84%E7%B1%BB/"/>
      <url>/2019/03/10/%E7%B1%BB-%E4%B8%8D%E5%85%81%E8%AE%B8%E5%A4%8D%E5%88%B6%E7%9A%84%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>假设您需要模拟国家的整体。一个国家只能有一位总统，而president类面临如下风险：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Presient ourPresident;</span><br><span class="line">DoSomething(ourPresident);<span class="comment">//duplicate created in passing by value</span></span><br><span class="line">President clone;</span><br><span class="line">clone = ourpresident;<span class="comment">//duplicate via assignment</span></span><br></pre></td></tr></table></figure><p>显然，需要避免这样的情况发生。</p><p>如果您不生命复制构造函数，C++将为您添加一个公有的默认复制构造函数，这破坏了您的设计，威胁着您的实现。然而，C++提供了这种设计范式的解决方案。</p><p>要禁止类对象被复制，可以声明一个私有的复制构造函数。这确保函数调用DoSomething(ourPresident)无法通过编译。为禁止赋值，可以声明一个私有的赋值运算符。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">President</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    President(<span class="keyword">const</span> President&amp;);<span class="comment">//private copy constructor</span></span><br><span class="line">    President&amp; <span class="keyword">operator</span> =(<span class="keyword">const</span> President&amp;);<span class="comment">//private copy assignment operator</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...other attributes</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>无需给私有复制构造函数和私有赋值运算符提供实现，只需将它们声明为私有的就足够实现不允许复制的目标。</strong></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>类-有助于改善性能的移动构造函数</title>
      <link href="/2019/03/10/%E7%B1%BB-%E6%9C%89%E5%8A%A9%E4%BA%8E%E6%94%B9%E5%96%84%E6%80%A7%E8%83%BD%E7%9A%84%E7%A7%BB%E5%8A%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
      <url>/2019/03/10/%E7%B1%BB-%E6%9C%89%E5%8A%A9%E4%BA%8E%E6%94%B9%E5%96%84%E6%80%A7%E8%83%BD%E7%9A%84%E7%A7%BB%E5%8A%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>如果指针所指向非常大的内存数据的话,则拷贝构造的代价就非常昂贵,会极大地影响性能。C++11提供一种简洁解决方法:移动构造函数,即是<strong>在用原对象指针对新对象指针进行赋值后,将原对象成员指针置为空指针,使得其无法指向内存数据,从而保证在析构的时候不会产生内存泄漏</strong>。这样既不用分配新内存,也不会产生内存泄漏,从而很好地解决了上述问题。</p><hr><p>由于C++的特征和需求，有些情况下对象会自动被复制。请看如下代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span>&#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...members</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">MyString <span class="title">Copy</span><span class="params">(MyString&amp; source)</span><span class="comment">//function</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">MyString <span class="title">copyForReturn</span><span class="params">(source.GetString())</span></span>;<span class="comment">//create copy</span></span><br><span class="line">    <span class="keyword">return</span> copyForReturn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">MyString <span class="title">sayHello</span><span class="params">(<span class="string">"Hello World of C++"</span>)</span></span>;</span><br><span class="line">    <span class="function">MyString <span class="title">sayHelloAgain</span><span class="params">(Copy(sayHello))</span></span>;<span class="comment">//invokes 2x copy constructor</span></span><br><span class="line"><span class="comment">//一次是弄临时变量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如注释指出的，实例化sayHelloAgain时，由于调用了函数Copy(sayHello)，而它按值返回一个MyString，因此调用了复制构造函数两次。然而，这个返回值存在时间很短，而且在表达式外不可用，因此，C++编译器严格地调用复制构造函数反而降低了性能，如果复制的对象很大，对性能的影响将很严重。</p><p>为了避免这种性能瓶颈，C++11引入了移动构造函数。移动构造函数的语法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//move constructor</span></span><br><span class="line">MyString(MyString&amp; moveSource)&#123;</span><br><span class="line">    <span class="keyword">if</span>(moveSource.buffer!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        buffer=moveSource.buffer;<span class="comment">//take ownership i.e. 'move'</span></span><br><span class="line">        moveSource.buffer=<span class="literal">NULL</span>;<span class="comment">//set the move source to NULL</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有移动构造函数的时候，编译器将自动使用它来“移动”临时资源，从而避免深复制。实现移动构造函数后，应将前面的注释改成下面这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">MyString <span class="title">sayHelloAgain</span><span class="params">(Copy(sayHello))</span></span>;<span class="comment">//invokes 1x copy, 1x move constructors</span></span><br></pre></td></tr></table></figure><p>移动构造函数通常是利用移动赋值运算符实现的。这将在运算符重载中进行介绍。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>虚拟表</title>
      <link href="/2019/03/10/%E8%99%9A%E6%8B%9F%E8%A1%A8/"/>
      <url>/2019/03/10/%E8%99%9A%E6%8B%9F%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="虚拟表"><a href="#虚拟表" class="headerlink" title="虚拟表"></a>虚拟表</h2><p><a href="https://www.learncpp.com/cpp-tutorial/125-the-virtual-table" target="_blank" rel="noopener">原文链接</a></p><p>为了实现虚函数，C ++使用一种称为虚拟表的特殊形式的后期绑定。该<strong>虚拟表</strong>是用于解决在动态/后期绑定方式的函数调用函数的查找表。虚拟表有时会使用其他名称，例如“vtable”，“虚函数表”，“虚方法表”或“调度表”。</p><p>因为了解虚拟表的工作原理并不需要使用虚函数，所以可以将此部分视为可选读取。</p><p>虚拟表实际上非常简单，虽然用文字描述有点复杂。首先，每个使用虚函数的类（或者从使用虚函数的类派生）都有自己的虚拟表。该表只是编译器在编译时设置的静态数组。虚拟表包含可由类的对象调用的每个虚函数的一个条目。此表中的每个条目只是一个函数指针，指向该类可访问的最派生函数。</p><p>其次，编译器还会添加一个隐藏指向基类的指针，我们称之为 <em>__ vptr。</em> <strong>vptr在创建类实例时自动设置，以便指向该类的虚拟表。与 this指针不同， this指针实际上是编译器用来解析自引用的函数参数，*</strong> vptr是一个真正的指针。因此，它使每个类对象的分配大一个指针的大小。这也意味着* __ vptr由派生类继承，这很重要。</p><p>到目前为止，你可能对这些东西如何组合在一起感到困惑，所以让我们来看一个简单的例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">function1</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">function2</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D1</span>:</span> <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">function1</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D2</span>:</span> <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">function2</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因为这里有3个类，编译器将设置3个虚拟表：一个用于Base，一个用于D1，一个用于D2。</p><p>编译器还会添加一个隐藏指针，指向使用虚函数的最基类。虽然编译器会自动执行此操作，但我们会将其放在下一个示例中，以显示它的添加位置：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    FunctionPointer *__vptr;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">function1</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">function2</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D1</span>:</span> <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">function1</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D2</span>:</span> <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">function2</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>创建类对象时， *__ vptr设置为指向该类的虚拟表。例如，当创建Base类型的对象时，<strong>*vptr设置为指向Base的虚拟表。构造D1或D2类型的对象时，</strong>* vptr设置为分别指向D1或D2的虚拟表。</p><p>现在，我们来谈谈如何填写这些虚拟表。因为这里只有两个虚函数，每个虚拟表将有两个条目（一个用于function1（），一个用于function2（））。请记住，当填写这些虚拟表时，每个条目都填充了该类类型的对象可以调用的派生最多的函数。</p><p>Base对象的虚拟表很简单。Base类型的对象只能访问Base的成员。Base无法访问D1或D2功能。因此，function1的条目指向Base :: function1（），而function2的条目指向Base :: function2（）。</p><p>D1的虚拟表稍微复杂一些。D1类型的对象可以访问D1和Base的成员。但是，D1重写了function1（），使得D1 :: function1（）比Base :: function1（）派生得更多。因此，function1的条目指向D1 :: function1（）。D1没有覆盖function2（），因此function2的条目将指向Base :: function2（）。</p><p>D2的虚拟表类似于D1，除了function1的条目指向Base :: function1（），而function2的条目指向D2 :: function2（）。</p><p>这是图形的图片：</p><p><img src="http://www.learncpp.com/images/CppTutorial/Section12/VTable.gif" alt="img"></p><p>虽然这个图有点疯狂，但它非常简单：每个类中的* __ vptr指向该类的虚拟表。虚拟表中的条目指向允许调用该类的函数对象的最派生版本。</p><p>那么考虑当我们创建D1类型的对象时会发生什么：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;    D1 d1;&#125;</span><br></pre></td></tr></table></figure><p>因为d1是D1对象，所以d1将其* __ vptr设置为D1虚拟表。</p><p>现在，让我们设置一个指向D1的基指针：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;    D1 d1;    Base *dPtr = &amp;d1;&#125;</span><br></pre></td></tr></table></figure><p>请注意，因为dPtr是基指针，所以它只指向d1的Base部分。但是，请注意* <strong>vptr位于类的Base部分，因此dPtr可以访问此指针。最后，请注意dPtr - &gt;</strong> vptr指向D1虚拟表！因此，即使dPtr属于Base类型，它仍然可以访问D1的虚拟表（通过__vptr）。</p><p>那么当我们尝试调用dPtr-&gt; function1（）时会发生什么？</p><p>首先，程序识别出function1（）是一个虚函数。其次，程序使用dPtr - &gt; __ vptr来获取D1的虚拟表。第三，它查找在D1的虚拟表中调用哪个版本的function1（）。这已设置为D1 :: function1（）。因此，dPtr-&gt; function1（）解析为D1 :: function1（）！</p><p>现在，您可能会说，“但是，如果dPtr真正指向Base对象而不是D1对象，那该怎么办呢？它还会调用D1 :: function1（）吗？“ 答案是不。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;    Base b;    Base *bPtr = &amp;b;    bPtr-&gt;function1();&#125;</span><br></pre></td></tr></table></figure><p>在这种情况下，当创建b时， <strong>vptr指向Base的虚拟表，而不是D1的虚拟表。因此，bPtr - &gt;</strong> vptr也将指向Base的虚拟表。函数1（）的Base的虚拟表条目指向Base :: function1（）。因此，bPtr-&gt; function1（）解析为Base :: function1（），这是Base对象应该能够调用的function1（）的派生最多的版本。</p><p>通过使用这些表，编译器和程序能够确保函数调用解析为适当的虚函数，即使您只使用指针或对基类的引用！</p><p>由于以下几个原因，调用虚函数比调用非虚函数要慢：首先，我们必须使用* __ vptr来获取相应的虚拟表。其次，我们必须索引虚拟表以找到要调用的正确函数。只有这样我们才能调用该函数。因此，我们必须执行3个操作来查找要调用的函数，而不是正常间接函数调用的2个操作，或者直接函数调用的一个操作。然而，对于现代计算机，这个增加的时间通常是相当微不足道的。</p><p>另外作为提醒，任何使用虚函数的类都有__vptr，因此该类的每个对象都会被一个指针变大。虚拟功能很强大，但它们确实具有性能成本。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>类-复制构造函数</title>
      <link href="/2019/03/10/%E7%B1%BB-%E5%A4%8D%E5%88%B6%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
      <url>/2019/03/10/%E7%B1%BB-%E5%A4%8D%E5%88%B6%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="浅复制及其存在的问题"><a href="#浅复制及其存在的问题" class="headerlink" title="浅复制及其存在的问题"></a>浅复制及其存在的问题</h2><p>复制某个类的对象时，将复制其指针成员，但不复制指针指向的缓冲区，其结果是两个对象指向同一块动态分配的内存。销毁其中一个对象时，delete[]释放这个内存块，导致另一个对象存储的指针拷贝无效，这种复制被称为浅复制，会威胁程序的稳定性。</p><h2 id="使用复制构造函数确保深复制"><a href="#使用复制构造函数确保深复制" class="headerlink" title="使用复制构造函数确保深复制"></a>使用复制构造函数确保深复制</h2><p><strong>复制构造函数是一个重载的构造函数，由编写类的程序员提供。</strong>每当对象被复制时，编译器都将调用复制构造函数。语法如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">A(<span class="keyword">const</span> A&amp; copySource);<span class="comment">//copy constructor  </span></span><br><span class="line">&#125;;</span><br><span class="line">A::A(<span class="keyword">const</span> A&amp;copySource)&#123;</span><br><span class="line">    <span class="comment">//copy constructor implementation code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复制构造函数接受一个以引用方式传入的当前类的对象作为参数。这个参数时源对象的别名，您使用它来编写自定义的复制代码，确保对所有的缓冲区进行深复制。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>复制构造函数确保下面的函数调用进行深复制</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">MyString <span class="title">sayHello</span><span class="params">(<span class="string">"Hello from String Class"</span>)</span></span>;</span><br><span class="line">UseMyString(sayHello);</span><br></pre></td></tr></table></figure><p>然而，如果您通过赋值进行复制时，结果如何呢?</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">MyString <span class="title">overwrite</span><span class="params">(<span class="string">"who cares?"</span>)</span></span>;</span><br><span class="line">overwrite=sayHello;</span><br></pre></td></tr></table></figure><p>由于您没有提供复制赋值运算符operator=，编译器提供的默认复制赋值运算符将导致浅复制。</p><p>赋值运算符将在运算符将在运算符重载中深入讨论。如下实现了复制赋值运算符：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MyString::<span class="keyword">operator</span>=(<span class="keyword">const</span> MyString &amp;copySourse)&#123;</span><br><span class="line">    <span class="comment">//...copy assignment operator code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>除非万不得已，不要将类成员声明为原始指针</strong></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>类-析构函数</title>
      <link href="/2019/03/10/%E7%B1%BB-%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/"/>
      <url>/2019/03/10/%E7%B1%BB-%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>与构造函数一样，析构函数是一种特殊的函数。构造函数在实例化对象时被调用，而析构函数在对象销毁时自动被调用。</p><h2 id="声明和实现析构函数"><a href="#声明和实现析构函数" class="headerlink" title="声明和实现析构函数"></a>声明和实现析构函数</h2><p>析构函数看起来像一个与类同名的函数，但前面有一个 ~ 符号。因此，Human类的析构函数的声明类似于下面一样</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>&#123;</span></span><br><span class="line">~Human();</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>在类声明中实现，在类外声明实现的代码形式类似于构造函数在类声明中实现和在类外实现。<a href="\2019\03\10\类-构造函数\index.html">传送门</a></p><h2 id="何时及如何使用析构函数"><a href="#何时及如何使用析构函数" class="headerlink" title="何时及如何使用析构函数"></a>何时及如何使用析构函数</h2><p>每当对象不再在作用域内或者通过delete被删除进而被销毁时，都将调用析构函数。这使得析构函数成为重置变量以及释放动态分配的内存和其他资源的理想场所。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span>* buffer;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">MyString(<span class="keyword">const</span> <span class="keyword">char</span>* initString)<span class="comment">//constructor</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (initString != <span class="literal">NULL</span>) &#123;</span><br><span class="line">buffer = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(initString) + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(buffer, initString);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">buffer = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~MyString() &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Invoking destructor, clearing up"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (buffer != <span class="literal">NULL</span>) </span><br><span class="line"><span class="keyword">delete</span>[]buffer;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>析构函数不能重载，每个类都只能有一个析构函数。如果您忘记了实现虚构函数，编译器会创建一个伪析构函数并调用它。伪析构函数为空，即不释放动态分配的内存。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>类-构造函数</title>
      <link href="/2019/03/10/%E7%B1%BB-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
      <url>/2019/03/10/%E7%B1%BB-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><p>构造函数是一种特殊的函数（方法），在根据类创建对象时被调用，与函数一样，构造函数也可以重载</p><h2 id="声明和实现构造函数"><a href="#声明和实现构造函数" class="headerlink" title="声明和实现构造函数"></a>声明和实现构造函数</h2><p>构造函数是一种特殊的函数，它与类同名并且不返回任何值。因此，Human类的构造函数的声明类似于下面这样</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    Human();<span class="comment">//declaration of a constructor</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个构造函数可以从类声明中实现，也可以在类外实现。代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类内定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    Human()&#123;</span><br><span class="line">        <span class="comment">//constructor code here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类外定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  Human();  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Human::Human()&#123;</span><br><span class="line"><span class="comment">//constructor code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重载构造函数"><a href="#重载构造函数" class="headerlink" title="重载构造函数"></a>重载构造函数</h2><p>与函数一样，构造函数也可以重载，因此，可以创建一个将姓名作为参数的构造函数，如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    Human()&#123;</span><br><span class="line">        <span class="comment">//default constructor code here</span></span><br><span class="line">    &#125;  </span><br><span class="line">    Human(<span class="built_in">string</span> humansName)&#123;</span><br><span class="line">        <span class="comment">//overloaded constructor code here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如下程序演示了重载构造函数的用途，它在创建Human对象的时候提供了姓名</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Human() &#123;<span class="comment">//default constructor </span></span><br><span class="line">age = <span class="number">0</span>;<span class="comment">//initialized to ensure no junk value</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Default constructor : name and age not set"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Human(<span class="built_in">string</span> humansName, <span class="keyword">int</span> humansAge) &#123;<span class="comment">//overLoaded</span></span><br><span class="line">name = humansName;</span><br><span class="line">age = humansAge;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Overloaded constructor creats:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="string">" of "</span>&lt;&lt;age &lt;&lt; <span class="string">" years"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Human firstMan;</span><br><span class="line"><span class="function">Human <span class="title">firstWoman</span><span class="params">(<span class="string">"Eve"</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><blockquote><p>Default constructor : name and age not set<br>Overloaded constructor creats:<br>Eve of 20 years</p></blockquote><p>如果Human类没有默认构造函数，则在main()中创建每个Human对象时都只能使用将姓名和年龄作为参数的构造函数；在这种情况下，不提供姓名和年龄就无法创建Human对象。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><strong>您可以选择不实现默认构造函数，从而要求实例化对象时必须提供某些参数。</strong></p><h2 id="没有默认构造函数的类"><a href="#没有默认构造函数的类" class="headerlink" title="没有默认构造函数的类"></a>没有默认构造函数的类</h2><p>在如下程序中，Human没有默认构造函数，因此创建Human对象的时候必须提供姓名和年龄。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Human(<span class="built_in">string</span> humansName, <span class="keyword">int</span> humansAge) &#123;<span class="comment">//overLoaded</span></span><br><span class="line">name = humansName;</span><br><span class="line">age = humansAge;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Overloaded constructor creats:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="string">" of "</span> &lt;&lt; age &lt;&lt; <span class="string">" years"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IntroduceSelf</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"I am "</span> + name &lt;&lt; <span class="string">" and am "</span> &lt;&lt; age &lt;&lt; <span class="string">" years old"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">Human <span class="title">firstMan</span><span class="params">(<span class="string">"Adam"</span>, <span class="number">25</span>)</span></span>;</span><br><span class="line"><span class="function">Human <span class="title">firstWoman</span><span class="params">(<span class="string">"Eve"</span>, <span class="number">28</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">firstMan.IntroduceSelf();</span><br><span class="line">firstWoman.IntroduceSelf();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><blockquote><p>Overloaded constructor creats:<br>Adam of 25 years<br>Overloaded constructor creats:<br>Eve of 28 years<br>I am Adam and am 25 years old<br>I am Eve and am 28 years old</p></blockquote><p>没有默认构造函数，而在您提供了重载的构造函数的时候，C++编译器不会为您生成默认构造函数。</p><h2 id="带默认值的构造函数参数"><a href="#带默认值的构造函数参数" class="headerlink" title="带默认值的构造函数参数"></a>带默认值的构造函数参数</h2><p>就像函数可以有带默认值的参数一样，构造函数也可以。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//overloaded constructor (no default constructor)</span></span><br><span class="line">Human(<span class="built_in">string</span> humansName, <span class="keyword">int</span> humansAge = <span class="number">25</span>) &#123;</span><br><span class="line">name = humansName;</span><br><span class="line">age = humansAge;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Overloaded constructor creats:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="string">" of "</span> &lt;&lt; age &lt;&lt; <span class="string">" years"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//other members</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>默认构造函数是调用时可以不提供参数的构造函数，<strong>并不一定是不接受任何参数的构造函数</strong>，因此，下面的构造函数虽然有两个参数，但他们都有默认值，因此也是默认构造函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//overloaded constructor (no default constructor)</span></span><br><span class="line">Human(<span class="built_in">string</span> humansName=<span class="string">"Adam"</span>, <span class="keyword">int</span> humansAge = <span class="number">25</span>) &#123;</span><br><span class="line">name = humansName;</span><br><span class="line">age = humansAge;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Overloaded constructor creats:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="string">" of "</span> &lt;&lt; age &lt;&lt; <span class="string">" years"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//other members</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因为实例化Human对象时仍可不提供任何参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Human adam;<span class="comment">//Human takes default name "Adam" age 25</span></span><br></pre></td></tr></table></figure><h2 id="包含初始化列表的构造函数"><a href="#包含初始化列表的构造函数" class="headerlink" title="包含初始化列表的构造函数"></a>包含初始化列表的构造函数</h2><p>众所周知，构造函数对初始化成员变量很有用。另一种初始化成员变量的方法是使用初始化列表。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//two parameters to initialize members age and name</span></span><br><span class="line">Human(<span class="built_in">string</span> humansName, <span class="keyword">int</span> humansAge)</span><br><span class="line">    : name(humansName),age(humansAge)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Overloaded constructor creats:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="string">" of "</span> &lt;&lt; age &lt;&lt; <span class="string">" years"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//other members</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++多态</title>
      <link href="/2019/03/09/C-%E5%A4%9A%E6%80%81/"/>
      <url>/2019/03/09/C-%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h1 id="多态基础"><a href="#多态基础" class="headerlink" title="多态基础"></a>多态基础</h1><p>多态是面向对象语言的一种特征，让您能够以类似的方式处理不同类似的对象</p><h2 id="为何需要多态行为"><a href="#为何需要多态行为" class="headerlink" title="为何需要多态行为"></a>为何需要多态行为</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;using namespace std;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fish</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Fish Swims"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tuna</span> :</span><span class="keyword">public</span> Fish &#123;</span><br><span class="line"><span class="keyword">public</span>:  <span class="function"><span class="keyword">void</span> <span class="title">Swim</span><span class="params">()</span> </span>&#123;        </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Tuna Swims"</span> &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeFishSwim</span><span class="params">(Fish&amp; inputFish)</span> </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">inputFish.Swim();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">Tuna myDinner;    </span><br><span class="line">myDinner.Swim();    </span><br><span class="line">MakeFishSwim(myDinner);    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><blockquote><p>Tuna swims!</p><p>Fish swims!</p></blockquote><p>虽然传入的Tuna对象，MakeFishSwim(Fish&amp;)也将其视为Fish,进而调用<br>Fish::Swim。输出表明，虽然传入的是Tuna对象，但是得到的是Fish的输出。</p><h2 id="使用虚函数实现多态行为（基类中多了virtual）"><a href="#使用虚函数实现多态行为（基类中多了virtual）" class="headerlink" title="使用虚函数实现多态行为（基类中多了virtual）"></a>使用虚函数实现多态行为（基类中多了virtual）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fish</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Fish swims!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tuna</span> :</span><span class="keyword">public</span> Fish &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Tuna swims!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Carp</span> :</span><span class="keyword">public</span> Fish &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Carp swims!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeFishSwim</span><span class="params">(Fish&amp; inputFish)</span> </span>&#123;</span><br><span class="line">    inputFish.Swim();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Tuna myDinner;</span><br><span class="line">    Carp myLunch;</span><br><span class="line">    MakeFishSwim(myDinner);</span><br><span class="line">    MakeFishSwim(myLunch);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><blockquote><p>Tuna swims!</p><p>Carp swims!</p></blockquote><p>首先，根本没有调用Fish::Swim( ),因为存在覆盖版本的Tuna::Swim( )和Carp::Swim( ),它们优先于声明为虚函数的Fish::Swim( )</p><p>这就是多态：<strong>将派生类视为基类对象，并执行派生类的Swim()实现</strong></p><h2 id="为何需要虚构造函数"><a href="#为何需要虚构造函数" class="headerlink" title="为何需要虚构造函数"></a>为何需要虚构造函数</h2><p>首先分析如下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fish</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Fish() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Constructed Fish"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Fish() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Destroyed Fish"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tuna</span> :</span><span class="keyword">public</span> Fish &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Tuna() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Constructed Tuna"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Tuna() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Destructed Tuna"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteFishMemory</span><span class="params">(Fish *pFish)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> pFish;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Allocating a Tuna on the free store:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Tuna* pTuna = <span class="keyword">new</span> Tuna;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Deleting the Tuna:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    DeleteFishMemory(pTuna);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Instantiating a Tuna on the stack"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Tuna myDinner;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Automatic destruction as it goes out of scope"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><blockquote><p>Allocating a Tuna on the free store:<br>Constructed Fish<br>Constructed Tuna<br>Deleting the Tuna:<br>Destroyed Fish<br>Instantiating a Tuna on the stack<br>Constructed Fish<br>Constructed Tuna<br>Automatic destruction as it goes out of scope<br>Destructed Tuna<br>Destroyed Fish</p></blockquote><p>注意到由于使用了关键字new，在自由存储区中构造了Tuna和Fish，但delete没有调用Tuna的析构函数，而只调用了Fish的析构函数；而构造和析构局部变量myDinner时，调用了基类和派生类的构造和析构过程。</p><p>这个程序表明，对于使用new在自由存储区中实例化的派生类对象，如果将其赋给基类指针，并通过该指针调用delete，将不会调用派生类的析构函数，这可能会导致资源未释放，内存泄漏等问题。必须引起重视！</p><p>要避免这种问题，可将析构函数声明为虚函数。即：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> ~Fish() &#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Destructed Fish"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</span><br></pre></td></tr></table></figure><p><strong>务必将基类的析构函数声明为虚函数</strong></p><h2 id="虚函数的工作原理——理解虚函数表"><a href="#虚函数的工作原理——理解虚函数表" class="headerlink" title="虚函数的工作原理——理解虚函数表"></a>虚函数的工作原理——理解虚函数表</h2><p>参考<a href="http://www.killerwhale.xyz/2019/03/10/%E8%99%9A%E6%8B%9F%E8%A1%A8/index.html" target="_blank" rel="noopener">虚拟表</a></p><h2 id="抽象基类和纯虚函数"><a href="#抽象基类和纯虚函数" class="headerlink" title="抽象基类和纯虚函数"></a>抽象基类和纯虚函数</h2><p>不能实例化的基类被成为抽象基类，这样的基类只有一个用途，那就是从它派生出其他类。在C++中，要创建抽象基类，可声明纯虚函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractBase</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DoSomething</span><span class="params">()</span></span>=<span class="number">0</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该声明告诉编译器，AbstractBase的派生类必须实现方法DoSomething（）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fish</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Swim</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tuna</span> :</span><span class="keyword">public</span> Fish &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Tuna swims fast in the sea!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Carp</span> :</span><span class="keyword">public</span> Fish &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Carp swims slow in the lake!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeFishSwim</span><span class="params">(Fish&amp; inputFish)</span> </span>&#123;</span><br><span class="line">    inputFish.Swim();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Carp myLunch;</span><br><span class="line">    Tuna myDinner;</span><br><span class="line">    MakeFishSwim(myLunch);</span><br><span class="line">    MakeFishSwim(myDinner);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><blockquote><p>Carp swims slow in the lake!<br>Tuna swims fast in the sea!</p></blockquote><h2 id="使用虚继承解决菱形问题"><a href="#使用虚继承解决菱形问题" class="headerlink" title="使用虚继承解决菱形问题"></a>使用虚继承解决菱形问题</h2><p>分析如下代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Animal() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Animal constructor"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mammal</span> :</span><span class="keyword">public</span> Animal &#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> :</span><span class="keyword">public</span> Animal &#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reptail</span> :</span><span class="keyword">public</span> Animal &#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Platypus</span> :</span><span class="keyword">public</span> Mammal, <span class="keyword">public</span> Bird, <span class="keyword">public</span> Reptail &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Platypus() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Platypus constructor"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Platypus duckBilledP;</span><br><span class="line">    <span class="comment">//unconmment next line to see compile failure</span></span><br><span class="line">    <span class="comment">//age is ambigous as there are thrre instances of base Animal</span></span><br><span class="line">    <span class="comment">//duckBilledP.age=25;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><blockquote><p>Animal constructor<br>Animal constructor<br>Animal constructor<br>Platypus constructor</p></blockquote><p>输出表明，由于采用了多继承，而且Platypus的全部三个基类都是从Animal类派生而来的，因此创建Platypus实例时，自动创建了三个Animal实例。如果您愿意，可以分别设置这三个属性：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">duckBilledP.Mammal::Animal::age=<span class="number">25</span>;</span><br><span class="line">duckBilledP.Bird::Animal::age=<span class="number">25</span>;</span><br><span class="line">duckBilledP.Reptile::Animal::age=<span class="number">25</span>;</span><br></pre></td></tr></table></figure><p>显然，鸭嘴兽应该只有一个age属性，但您希望Platypus类以共有方式继承Mammal/Bird/Reptile.解决方案是使用虚继承。<strong>如果派生类可能被用作基类，派生它最好使用关键字virtual</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived1</span>:</span> <span class="keyword">public</span> <span class="keyword">virtual</span> Base&#123;</span><br><span class="line">    <span class="comment">//...members and functions</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived2</span>:</span> <span class="keyword">public</span> <span class="keyword">virtual</span> Base&#123;</span><br><span class="line">    <span class="comment">//...memebers and functions</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下列出了更佳的Platypus类声明</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Animal() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Animal constructor"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mammal</span> :</span><span class="keyword">public</span> <span class="keyword">virtual</span> Animal &#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> :</span><span class="keyword">public</span> <span class="keyword">virtual</span> Animal &#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reptail</span> :</span><span class="keyword">public</span> <span class="keyword">virtual</span> Animal &#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Platypus</span> <span class="title">final</span> :</span><span class="keyword">public</span> Mammal, <span class="keyword">public</span> Bird, <span class="keyword">public</span> Reptail &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Platypus() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Platypus constructor"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Platypus duckBilledP;</span><br><span class="line">    <span class="comment">//no compile error as there is only one Animal::age</span></span><br><span class="line">    duckBilledP.age = <span class="number">25</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><blockquote><p>Animal constructor<br>Platypus constructor</p></blockquote><p>如果将这里的输出与上面那个程序进行比较，会发现构造的Animal实例数减少到了1个，这表明之构造了一个Platypus。这是因为从Animalbb类派生Mammal/Bird/Reptile类时，使用了关键字virtual，这样Platypus继承这些类的时候，每个Platypus实例只包含一个Animal实例。另外，注意到使用了关键字final以禁止将Platypus类作基类。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>C++关键字virtual的含义随上下文而异，对其含义总结如下:</p><ul><li>在函数声明中，virtual意味着当基类指针指向派生类对象时，通过它可调用派生类的相应函数。</li><li>从Base类派生出Derrived1和Derrived2类时，如果使用了关键字virtual，则意味着再从Derived1和Derived2派生出Derived3时，每个Derived3实例只包含一个Base实例。</li></ul><p>也就是说，关键字virtual被用于实现两个不同的概念。</p><h2 id="表明覆盖意图限定符override"><a href="#表明覆盖意图限定符override" class="headerlink" title="表明覆盖意图限定符override"></a>表明覆盖意图限定符override</h2><p>前面的基类Fish都包含虚函数Swim()，如下面的代码所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fish</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Fish swims"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>假设派生类Tuna要定义函数Swim()，但特征标稍微不同——程序员本想覆盖Fish::Swim(),但不小心插入了关键字const ，如下所示:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tuna</span> :</span><span class="keyword">public</span> Fish &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Swim</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Tuna swims!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这种情况下，函数Tuna::Swim()实际上并不会覆盖Finish::Swim()，这是因为Tuna::Swim()包含const，导致它们的特征标不同。然而这些代码能通过编译，导致程序员误以为他在Tuna类中成狗的覆盖了函数的Swim()。从C++11起程序员可以使用限定符override来<strong>核实被覆盖的函数在基类中是否被声明为虚的：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tuna</span> :</span> <span class="keyword">public</span> Fish &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Swim</span><span class="params">()</span> <span class="keyword">const</span> override </span>&#123; <span class="comment">//！！！Error: no virtual fn with this sig in Fish</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Tuna swims"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>换而言之，override提供了一种强大的途径，让程序员能够明确表达对基类的虚函数u进行覆盖的意图，进而让编译器做如下检查：</p><ul><li>基类函数是否是虚函数？</li><li>基类中相应虚函数的特征标是否与派生类中被声明为override的函数完全相同？</li></ul><h2 id="使用final来禁止覆盖函数"><a href="#使用final来禁止覆盖函数" class="headerlink" title="使用final来禁止覆盖函数"></a>使用final来禁止覆盖函数</h2><p>被声明为final 的类不能用作基类，童谣，被声明为final的虚函数，不能再派生类中进行覆盖</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tuna</span>:</span><span class="keyword">public</span> Fish&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">//override Fish::Swim and make this final</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Swim</span><span class="params">()</span> override final</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Tuna swims!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可以继承这个版本的Tuna类，但不能进一步覆盖函数Swim():</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BluefinTuna</span> <span class="title">final</span>:</span><span class="keyword">public</span> Tuna&#123;<span class="keyword">public</span>:    <span class="function"><span class="keyword">void</span> <span class="title">Swim</span><span class="params">()</span></span>&#123;<span class="comment">//Error: Swim() was final in Tuna, cannot override    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>我们声明BluefinTuna时，也使用了关键字final，这将禁止BluefinTunal类用作基类，因此下面的代码将导致错误：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FailedDerivation</span>:</span><span class="keyword">public</span> BluefinTuna&#123;&#125;;</span><br></pre></td></tr></table></figure><h2 id="可将复制构造函数声明为虚函数吗？？？"><a href="#可将复制构造函数声明为虚函数吗？？？" class="headerlink" title="可将复制构造函数声明为虚函数吗？？？"></a>可将复制构造函数声明为虚函数吗？？？</h2><p>从技术上说，C++不支持虚复制构造函数。但，如果能实现虚复制构造函数，则创建一个基类指针集合（如静态数组，其中的每个元素指向不同的派生类对象）：<br>C++<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Fish * pFish[3];</span><br><span class="line">pFish[0]=new Tuna();</span><br><span class="line">pFish[1]=new Carp();</span><br><span class="line">pFish[2]=new Trout();</span><br></pre></td></tr></table></figure></p><p>并将其赋值给另一个相同类型的数组，虽然是通过Fish指针调用的复制构造函数，但复制指向的派生类对象，并将其进行深复制。</p><p><strong>然而，这只是一个美好的梦想。</strong></p><p>根本不可能实现虚复制构造函数，因为在基类方法声明中使用关键字virtual时，表示它将被派生类的实现覆盖，这种多态性是在<strong>运行阶段</strong>实现的。而<strong>构造函数只能创建固定类型的对象，不具备多态性</strong>，因此C++不允许使用虚复制构造函数。</p><p>虽然如此，但存在一种不错的解决方案，就是定义自己的克隆函数来实现上述目的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fish</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Fish* <span class="title">Clone</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tuna</span> :</span><span class="keyword">public</span> Fish &#123;</span><br><span class="line">    <span class="comment">//...other memebers</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Tuna* <span class="title">Clone</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="comment">//virtual clone function</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Tuna(*<span class="keyword">this</span>);<span class="comment">//return new Tuna that is copy of this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>虚函数Clone模拟了虚复制构造函数，但是需要显式使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fish</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Fish* <span class="title">Clone</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Swim</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~Fish() &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tuna</span> :</span><span class="keyword">public</span> Fish &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Fish* <span class="title">Clone</span><span class="params">()</span>override </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Tuna(*<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Swim</span><span class="params">()</span>override final </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Tuna swims fast in the sea"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BluefinTuna</span> <span class="title">final</span> :</span> <span class="keyword">public</span> Tuna &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Fish* <span class="title">Clone</span><span class="params">()</span> override </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BluefinTuna(*<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Cannot override Tuna::Swim as it is "final" in Tuna</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Carp</span> <span class="title">final</span> :</span><span class="keyword">public</span> Fish &#123;</span><br><span class="line">    <span class="function">Fish* <span class="title">Clone</span><span class="params">()</span> override </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Carp(*<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Swim</span><span class="params">()</span> override final </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Carp swims slow in the lake"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> ARRAY_SIZE = <span class="number">4</span>;</span><br><span class="line">    Fish* myFishes[ARRAY_SIZE] = &#123; <span class="literal">NULL</span> &#125;;</span><br><span class="line">    myFishes[<span class="number">0</span>] = <span class="keyword">new</span> Tuna();</span><br><span class="line">    myFishes[<span class="number">1</span>] = <span class="keyword">new</span> Carp();</span><br><span class="line">    myFishes[<span class="number">2</span>] = <span class="keyword">new</span> BluefinTuna();</span><br><span class="line">    myFishes[<span class="number">3</span>] = <span class="keyword">new</span> Carp();</span><br><span class="line">    Fish* myNewFishes[ARRAY_SIZE];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; ARRAY_SIZE; ++index) &#123;</span><br><span class="line">        myNewFishes[index] = myFishes[index]-&gt;Clone();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//invoke a virtual method to check</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; ARRAY_SIZE; ++index) &#123;</span><br><span class="line">        myNewFishes[index]-&gt;Swim();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//memory cleanup</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; ARRAY_SIZE; ++index) &#123;</span><br><span class="line">        <span class="keyword">delete</span> myFishes[index];</span><br><span class="line">        <span class="keyword">delete</span> myNewFishes[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="Q：抽象基类都不能被实例化，它有何用途呢？"><a href="#Q：抽象基类都不能被实例化，它有何用途呢？" class="headerlink" title="Q：抽象基类都不能被实例化，它有何用途呢？"></a>Q：抽象基类都不能被实例化，它有何用途呢？</h3><blockquote><p>抽象基类并非为实例化而创建的，而近充当基类。它包含纯虚函数，指定了派生类必须实现哪些函数，可以充当接口</p></blockquote><h3 id="Q：抽象基类中，可以定义成员函数和成员属性吗？"><a href="#Q：抽象基类中，可以定义成员函数和成员属性吗？" class="headerlink" title="Q：抽象基类中，可以定义成员函数和成员属性吗？"></a>Q：抽象基类中，可以定义成员函数和成员属性吗？</h3><blockquote><p>当然可以，但是这样的抽象基类也不能被实例化， 因为它至少包含一个纯虚函数，派生类必须实现该函数</p></blockquote><h3 id="Q-在继承层次中，需要在所有虚函数声明中都是用关键字virtual，还是只需要在基类中这样做？"><a href="#Q-在继承层次中，需要在所有虚函数声明中都是用关键字virtual，还是只需要在基类中这样做？" class="headerlink" title="Q: 在继承层次中，需要在所有虚函数声明中都是用关键字virtual，还是只需要在基类中这样做？"></a>Q: 在继承层次中，需要在所有虚函数声明中都是用关键字virtual，还是只需要在基类中这样做？</h3><blockquote><p>只需要在基类的函数声明中使用关键字virtual即可</p></blockquote><h3 id="Q-基类总应包含一个虚析构函数吗？"><a href="#Q-基类总应包含一个虚析构函数吗？" class="headerlink" title="Q: 基类总应包含一个虚析构函数吗？"></a>Q: 基类总应包含一个虚析构函数吗？</h3><blockquote><p>最好如此。如果编写了如下代码;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Base * pBase = <span class="keyword">new</span> Derived();</span><br><span class="line">&gt; <span class="keyword">delete</span> pBase;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>则仅当析构函数~Base（）被声明为虚函数时，delete pBase才会调用析构函数~Derived（）。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>程序员的线性代数阅读笔记</title>
      <link href="/2019/03/06/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/03/06/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="秩、逆矩阵、线性方程组——溯因推理"><a href="#秩、逆矩阵、线性方程组——溯因推理" class="headerlink" title="秩、逆矩阵、线性方程组——溯因推理"></a>秩、逆矩阵、线性方程组——溯因推理</h1><h2 id="正则矩阵（可逆矩阵、非奇异矩阵）"><a href="#正则矩阵（可逆矩阵、非奇异矩阵）" class="headerlink" title="正则矩阵（可逆矩阵、非奇异矩阵）"></a>正则矩阵（可逆矩阵、非奇异矩阵）</h2><h2 id="不是正则矩阵的，我们称其为奇异矩阵"><a href="#不是正则矩阵的，我们称其为奇异矩阵" class="headerlink" title="不是正则矩阵的，我们称其为奇异矩阵"></a>不是正则矩阵的，我们称其为奇异矩阵</h2><h2 id="线性方程组的解法"><a href="#线性方程组的解法" class="headerlink" title="线性方程组的解法"></a>线性方程组的解法</h2><ul><li>消元法</li><li>Gauss-Jordan法</li></ul><h2 id="逆矩阵的计算方法"><a href="#逆矩阵的计算方法" class="headerlink" title="逆矩阵的计算方法"></a>逆矩阵的计算方法</h2><ul><li>利用初等行变换，使得（A| I ）→（ I |A^-1^）</li></ul><h2 id="初等变换"><a href="#初等变换" class="headerlink" title="初等变换"></a>初等变换</h2><ul><li>笔算的步骤可以总结为：<ul><li>将某一行乘以c</li><li>将某一行的c倍加到另一行上去</li><li>交换两行</li><li>以上三种操作，都可以用“乘上某个矩阵”的形式表示出来（思考一下行操作与列操作）</li></ul></li><li>从空间的角度思考可得：<ul><li>将第i行乘以c，行列式的值为原来的c倍</li><li>将第j行乘以c加到第i行，行列式的值不变</li><li>交换第ij行，行列式的正负号改变</li></ul></li><li>注意：当进行初等变换的时候，要么只进行初等行变换，要么只进行初等列变换，两者不能同时进行（PS<strong>从初等变换矩阵的角度去考虑</strong>）</li></ul><h2 id="核（零空间）"><a href="#核（零空间）" class="headerlink" title="核（零空间）"></a>核（零空间）</h2><ul><li>对于给定的A，在映射的作用下，满足Ax=O的x的集合称为A的核，记作Ker A</li><li>核又称作零空间</li></ul><h2 id="像（陪域）"><a href="#像（陪域）" class="headerlink" title="像（陪域）"></a>像（陪域）</h2><ul><li>对于给定的A，将x进行各种不同的变换，在A的作用下，y=Ax构成的集合，称为A的像</li><li>像又称作陪域</li></ul><h2 id="Ker-A为原空间（定义域，即x所在的空间的一部分），Im-A-为目标空间（值域，也就是y所在空间的一部分）"><a href="#Ker-A为原空间（定义域，即x所在的空间的一部分），Im-A-为目标空间（值域，也就是y所在空间的一部分）" class="headerlink" title="Ker A为原空间（定义域，即x所在的空间的一部分），Im A 为目标空间（值域，也就是y所在空间的一部分）"></a>Ker A为原空间（定义域，即x所在的空间的一部分），Im A 为目标空间（值域，也就是y所在空间的一部分）</h2><h2 id="维数"><a href="#维数" class="headerlink" title="维数"></a>维数</h2><ul><li>如果最多能取得n个线性无关的向量，则空间的维数是n</li></ul><h2 id="维数定理"><a href="#维数定理" class="headerlink" title="维数定理"></a>维数定理</h2><ul><li>对于m*n矩阵A，有dim Ker A + dim Im A = n，其中dim X表示X 的维数</li></ul><h2 id="线性子空间"><a href="#线性子空间" class="headerlink" title="线性子空间"></a>线性子空间</h2><ul><li>对加法和数乘运算封闭的空间</li></ul><h2 id="线性无关、线性相关"><a href="#线性无关、线性相关" class="headerlink" title="线性无关、线性相关"></a>线性无关、线性相关</h2><ul><li>如果对于数u~1~，u~2~，……，u~n~，当u~1~a~1~ + u~2~a~2~ + ……+ u~n~a~n~ = 0成立时，有u~1~ = u~2~ = ……= u~n~ ，则称a~1~ ，……，a~n~ 是线性无关的</li><li>A的各个列向量线性无关——不压缩</li><li>A的各个列向量线性相关——压缩</li></ul><h2 id="秩"><a href="#秩" class="headerlink" title="秩"></a>秩</h2><ul><li><p>Im A 的维数dim Im A就是矩阵A的秩</p></li><li><p>秩的基本性质</p><ul><li><p>rank A≤min{m,n}</p><p>原因：目标空间是m维的，而包含其中的Im A无论如何也不可能让自己的维数超过m，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">原空间是n维，把空间全体都通过A映射过去，无论如何也不可能超过子集原来的维数n</span><br></pre></td></tr></table></figure></li><li><p>在乘以可逆矩阵之后，维数不发生变化</p></li><li><p>对于一般的矩阵A，B 有：</p><p>rank(BA)≤min{rank(A),rank(B)}</p><p>原因：第一阶段：原空间在A的作用下，移动到空间V上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第二阶段：空间V在B的作用下，移动到空间W，所求即空间W的维数</span><br></pre></td></tr></table></figure><p>通过第一阶段，空间V的维数已经变成了rankA，接下来无论B如何变化，最终的维数不会超过rankA，另外，在第二阶段中，就算空间全体都通过B进行了变换，最终为数也不会超过B，所以V作为空间的一部分，在B的作用下进行变化后，维数自然也不会超过rank B</p></li><li><p>转置矩阵的秩不变</p></li></ul><h2 id="逆矩阵存在的条件"><a href="#逆矩阵存在的条件" class="headerlink" title="逆矩阵存在的条件"></a>逆矩阵存在的条件</h2><ul><li>是不是压缩扁平化，如果是，那么不存在其逆矩阵，否则存在逆矩阵</li></ul></li></ul><h1 id="用空间的语言表达向量、矩阵和行列式"><a href="#用空间的语言表达向量、矩阵和行列式" class="headerlink" title="用空间的语言表达向量、矩阵和行列式"></a>用空间的语言表达向量、矩阵和行列式</h1><h2 id="三者的含义"><a href="#三者的含义" class="headerlink" title="三者的含义"></a>三者的含义</h2><ul><li>向量<br>有向线段（带有方向的线段）、空间内的点</li><li>矩阵<br>空间到空间的映射</li><li>行列式<br>上面的映射对应的“体积扩大率”</li></ul><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><ul><li>最直接的定义——把数值罗列起来就是向量</li><li>强调分量的个数——N维向量</li><li>没有特别说明的情况下，我们说的向量就是列向量</li><li>相同维数的向量之间的加法</li><li>向量的数乘</li></ul><h2 id="空间"><a href="#空间" class="headerlink" title="空间"></a>空间</h2><ul><li>类似于二维向量（5,3）可以在二维平面上用一个点进行表示，三维向量也可以用三维空间中的一个点进行表示，像这样强调向量的位置的时候，也称为 <strong>位置向量</strong></li><li><strong>向量不仅可以用点进行表示，也可以用有向线段进行表示</strong>，这样加法就可以解释成线段的连接，数乘就可以解释为线段的伸缩</li></ul><h2 id="基底"><a href="#基底" class="headerlink" title="基底"></a>基底</h2><ul><li>线性空间（向量空间）——一个只用加法和数乘就能“运算”的世界（即对加法和数乘封闭）</li><li>如果有两个向量e1和e2<strong>不共线</strong>，有向量v：沿着e1走3步，沿着e2走两步，那么这组向量e1和e2就叫做基底，沿着各个基准向量走的步数就叫做坐标。e1和e2就称为<strong>基向量</strong></li><li>线性组合</li><li>若任意向量x都可以用e1，e2……en的线性组合来表示，并且表示方法唯一，那么（e1，e2，……，en）称为基底</li><li>维数<ul><li>维数=基向量的个数=坐标的分量数</li></ul></li></ul><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><ul><li>暂时的定义： 把数排列成长方形就是矩阵</li><li>方阵：行数和列数相同</li><li>相同规模（行数列数都相等，即同型矩阵）的矩阵之间可以进行加法</li><li>矩阵的数乘</li><li>矩阵相乘<ul><li>矩阵与向量的乘积是向量</li><li>矩阵的列数（宽度）为“输入”的向量维数，行数（高度）为“输出”的向量维数</li><li>计算的时候，就好比把输入的列向量放倒（开车！？）然后将对应的元素分别相乘</li></ul></li><li>矩阵就是一种表示平直关系（函数关系）的便利手段</li><li>由于aij可以理解为“<strong>自变量j对结果i所施加的影响</strong>”，这样理解的话，自变量对因变量整体的影响表现出来就是矩阵</li><li>矩阵就是映射<ul><li>矩阵确定了从一个向量到另外一个向量的映射</li><li>映射相同则矩阵相同</li></ul></li><li>矩阵的乘积<ul><li>将右边的矩阵按列分割开来，将每一列看做一个列向量</li><li>将分割开的列向量与左边的矩阵做乘法（矩阵与向量的乘法）</li><li>把所得的结果拼接起来</li></ul></li><li>行向量在左边，列向量在右边</li></ul><h2 id="矩阵的乘方"><a href="#矩阵的乘方" class="headerlink" title="矩阵的乘方"></a>矩阵的乘方</h2><ul><li>矩阵的乘方相当于映射的迭代<ul><li>例如：A^3^ 表示先A再A再次A的操作，A^n^ 表示反复n次的操作</li><li>注意：矩阵没有平方和公式。（AB）^2^ 有时候不等于A^2^B^2^</li><li><strong>A^0^=I</strong></li></ul></li></ul><h2 id="零矩阵、单位矩阵、对角矩阵"><a href="#零矩阵、单位矩阵、对角矩阵" class="headerlink" title="零矩阵、单位矩阵、对角矩阵"></a>零矩阵、单位矩阵、对角矩阵</h2><ul><li><p>零矩阵：</p><ul><li><p>所有元素都是0的矩阵称为</p><p>零矩阵</p><p>，</p><ul><li>在A≠O，B≠O的情况下，也有可能得到BA=O</li><li>就算A≠O，也有可能得到A^2^=O</li></ul></li></ul></li><li><p>单位矩阵</p><ul><li>从左上到右下方向的对角元素是1，其余全部是0的矩阵称为<strong>单位矩阵</strong></li><li>单位矩阵表示什么都不做的映射</li></ul></li><li><p>对角矩阵</p><ul><li>从左上到右下的对角线上的值称为对角元素，其他元素称为非对角元素，当非对角元素全部为0时，该矩阵称为<strong>对角矩阵</strong></li><li>对角矩阵表示的映射是沿着坐标轴伸缩，其中对角元素就是各轴伸缩的倍率</li></ul></li></ul><h2 id="逆矩阵"><a href="#逆矩阵" class="headerlink" title="逆矩阵"></a>逆矩阵</h2><ul><li>逆矩阵=逆映射</li><li>可以理解为每个方向“反其道而行之”</li></ul><h2 id="分块矩阵"><a href="#分块矩阵" class="headerlink" title="分块矩阵"></a>分块矩阵</h2><ul><li>分块矩阵的加法<ul><li>类似于矩阵的加法</li></ul></li><li>分块矩阵的数乘<ul><li>类似于矩阵的数乘</li></ul></li><li>分块矩阵的乘法<ul><li>可以在分块以后把各个“大元素”当做数值，直接套用普通的矩阵运算法则</li></ul></li><li>分块对角矩阵<ul><li>对角区块的概念</li><li>分块对角矩阵的好处在于，我们可以将整个映射看作是由多个独立的变换组成的，其中每个变换对应一个区块</li><li>分块对角矩阵的乘方类似于矩阵的乘方</li><li>分块对角矩阵的乘方类似于对角矩阵的乘方</li></ul></li></ul><h2 id="坐标变换"><a href="#坐标变换" class="headerlink" title="坐标变换"></a>坐标变换</h2><ul><li>坐标变换可以用“乘以方阵A”的形式进行表示，这里的A存在逆矩阵</li><li>乘以某个存在逆矩阵的方阵A，也可以用坐标变换来表示</li></ul><h2 id="转置矩阵"><a href="#转置矩阵" class="headerlink" title="转置矩阵"></a>转置矩阵</h2><ul><li>共轭转置<ul><li>矩阵转置以后所有的复数都写成其共轭复数</li></ul></li></ul><h2 id="应当时刻注意矩阵的规模（大小、行数、列数）"><a href="#应当时刻注意矩阵的规模（大小、行数、列数）" class="headerlink" title="应当时刻注意矩阵的规模（大小、行数、列数）"></a>应当时刻注意矩阵的规模（大小、行数、列数）</h2><h2 id="行列式-体积扩大率"><a href="#行列式-体积扩大率" class="headerlink" title="行列式=体积扩大率"></a>行列式=体积扩大率</h2><ul><li>一般情况下，对于n阶方阵A，“n维版本的体积的扩大率”，就是行列式</li><li>图形扁平化的情况下，体积扩大率为0</li><li>对图形进行镜像反转变换的情况下， 可以用负的扩大率来表示</li></ul><h2 id="行列式的性质"><a href="#行列式的性质" class="headerlink" title="行列式的性质"></a>行列式的性质</h2><ul><li>简单性质<ul><li>|AB|=|A|*|B|</li><li>意义： 首先映射B造成了det B倍的变换，接下来映射A带来了det A倍的变化，于是先B后A自然就造成了体积扩大det A*det B倍</li></ul></li><li>转置矩阵的行列式与原行列式相等</li><li>行列互换以后，行列式的所有性质依然成立</li><li>关键性质<ul><li>多重线性<ul><li>相当于可以把行列式中的因子提出来，集合上可以理解为一叠扑克牌，它的高变为原来的10倍，相当于体积变成原来的10倍</li><li>根据多重线性性质，n阶矩阵A乘以常数c以后，所得矩阵的行列式是原来矩阵A行列式的c^n^ 倍，注意不是c倍</li></ul></li><li>交替性<ul><li>交换行列式中的两行或者两列时，体积保持不变（行列式的绝对值不变），行列式正负不变</li></ul></li></ul></li><li>行列式的计算方法——笔算法（高斯消去法）</li><li>行列式按行（列）展开与逆矩阵</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客搭建</title>
      <link href="/2019/03/05/Hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/03/05/Hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="HEXO博客搭建教程"><a href="#HEXO博客搭建教程" class="headerlink" title="HEXO博客搭建教程"></a>HEXO博客搭建教程</h1><h3 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h3><h4 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h4><ol><li><p><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 下载，并安装。详细步骤：<a href="https://www.simon96.online/2018/11/10/hexo-env/" target="_blank" rel="noopener">https://www.simon96.online/2018/11/10/hexo-env/</a></p></li><li><p><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a> 下载，并安装。详细步骤：<a href="https://www.simon96.online/2018/11/10/hexo-env/" target="_blank" rel="noopener">https://www.simon96.online/2018/11/10/hexo-env/</a></p></li><li><p>安装Hexo，在命令行（即Git Bash）运行以下命令：</p><blockquote><p>npm install -g hexo-cli</p></blockquote></li><li><p>初始化Hexo，在命令行（即Git Bash）依次运行以下命令即可：</p><p>以下，即存放Hexo初始化文件的路径， 即站点目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install</span><br></pre></td></tr></table></figure><p>新建完成后，在路径下，会产生这些文件和文件夹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes</span><br></pre></td></tr></table></figure><p><strong>注</strong>：</p><ul><li><p>hexo相关命令均在<strong>站点目录</strong>下，用<strong>Git Bash</strong>运行。</p></li><li><p>站点配置文件：站点目录下的<code>_config.yml</code>。</p><p>路径为<code>&lt;folder&gt;\_config.yml</code></p></li><li><p>主题配置文件：站点目录下的<code>themes</code>文件夹下的，主题文件夹下的<code>_config.yml</code>。</p><p>路径为<code>&lt;folder&gt;\themes\&lt;主题文件夹&gt;\_config.yml</code></p></li></ul></li><li><p>启动服务器。在路径下，命令行（即Git Bash）输入以下命令，运行即可：</p><blockquote><p>hexo server</p></blockquote></li><li><p>浏览器访问网址： <code>http://localhost:4000/</code></p></li></ol><p>至此，您的Hexo博客已经搭建在本地。</p><h4 id="实施方案"><a href="#实施方案" class="headerlink" title="实施方案"></a>实施方案</h4><h5 id="方案一：GithubPages"><a href="#方案一：GithubPages" class="headerlink" title="方案一：GithubPages"></a>方案一：GithubPages</h5><ol><li><p>创建<a href="https://github.com/" target="_blank" rel="noopener">Github</a>账号</p></li><li><p>创建仓库， 仓库名为：&lt;Github账号名称&gt;.github.io</p></li><li><p>将本地Hexo博客推送到GithubPages</p><p>3.1. 安装<code>hexo-deployer-git</code>插件。在命令行（即Git Bash）运行以下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>3.2. 添加SSH key。</p><ul><li><p>创建一个 SSH key 。在命令行（即Git Bash）输入以下命令， 回车三下即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure></li><li><p>添加到 github。 复制密钥文件内容（路径形如<code>C:\Users\Administrator\.ssh\id_rsa.pub</code>），粘贴到<a href="https://github.com/settings/keys" target="_blank" rel="noopener">New SSH Key</a>即可。</p></li><li><p>测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com$ yes</span><br></pre></td></tr></table></figure></li></ul><p>3.3. 修改<code>_config.yml</code>（在站点目录下）。文件末尾修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git  branch: master</span><br></pre></td></tr></table></figure><p>注意：上面仓库地址写ssh地址，不写http地址。</p><p>3.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回<code>INFO Deploy done: git</code>即成功推送：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g$ hexo d</span><br></pre></td></tr></table></figure></li><li><p>等待1分钟左右，浏览器访问网址： <code>https://&lt;Github账号名称&gt;.github.io</code></p></li></ol><p>至此，您的Hexo博客已经搭建在GithubPages, 域名为<code>https://&lt;Github账号名称&gt;.github.io</code>。</p><h5 id="方案二：GithubPages-域名"><a href="#方案二：GithubPages-域名" class="headerlink" title="方案二：GithubPages + 域名"></a>方案二：GithubPages + 域名</h5><p>在方案一的基础上，添加自定义域名（您购买的域名）。</p><ol><li><p>域名解析。</p><p>类型选择为 CNAME；</p><p>主机记录即域名前缀，填写为www；</p><p>记录值填写为&lt;Github账号名称&gt;.github.io；</p><p>解析线路，TTL 默认即可。</p></li><li><p>仓库设置。</p><p>2.1. 打开博客仓库设置：<code>https://github.com/&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io/settings</code></p><p>2.2. 在Custom domain下，填写自定义域名，点击<code>save</code>。</p><p>2.3. 在站点目录的<code>source</code>文件夹下，创建并打开<code>CNAME.txt</code>，写入你的域名（如<code>www.simon96.online</code>），保存，并重命名为<code>CNAME</code>。</p></li><li><p>等待10分钟左右。</p><p>浏览器访问自定义域名。</p><p>至此，您的Hexo博客已经解析到自定义域名，<code>https://&lt;Github账号名称&gt;.github.io</code>依然可用。</p></li></ol><h5 id="方案三：GithubPages-CodingPages-域名"><a href="#方案三：GithubPages-CodingPages-域名" class="headerlink" title="方案三：GithubPages + CodingPages + 域名"></a>方案三：GithubPages + CodingPages + 域名</h5><p>GithubPages 在国内较慢，百度不收录，而CodingPages 在国外较快。所以在方案二的基础上，添加CodingPages 。</p><ol><li><p>创建<a href="https://coding.net/" target="_blank" rel="noopener">Coding</a>账号</p></li><li><p>创建仓库， 仓库名为：&lt;Coding账号名称&gt;</p></li><li><p>进入项目里『代码』页面，点击『一键开启静态 Pages』，稍等片刻CodingPages即可部署成功。</p></li><li><p>将本地Hexo博客推送到CodingPages</p><p>4.1. 鉴于创建GithubPages 时，已经生成过公钥。可直接复制密钥文件内容（路径形如<code>C:\Users\Administrator\.ssh\id_rsa.pub</code>）， 粘贴到<a href="https://dev.tencent.com/user/account/setting/keys" target="_blank" rel="noopener">新增公钥</a>。</p><p>4.2. 测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@git.coding.net$ yes</span><br></pre></td></tr></table></figure><p>4.3. 修改<code>_config.yml</code>（在存放Hexo初始化文件的路径下）。文件末尾修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:- type: git  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git  branch: master- type: git  repo: git@git.dev.tencent.com:&lt;Coding账号名称&gt;/&lt;Coding账号名称&gt;.git  branch: master</span><br></pre></td></tr></table></figure><p>4.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回<code>INFO Deploy done: git</code>即成功推送：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g$ hexo d</span><br></pre></td></tr></table></figure></li><li><p>域名解析</p><ol><li><p>添加 CNAME 记录指向 &lt;Coding账号名称&gt;.coding.me</p><p>类型选择为 CNAME；</p><p>主机记录即域名前缀，填写为www；</p><p>记录值填写为&lt;Github账号名称&gt;.coding.me；</p><p>解析线路，TTL 默认即可。</p></li><li><p>添加 两条A 记录指向 192.30.252.153和192.30.252.154</p><p>类型选择为 A；</p><p>主机记录即域名前缀，填写为@；</p><p>记录值填写为192.30.252.153和192.30.252.154；</p><p>解析线路，境外或谷歌。</p></li><li><p>在『Pages 服务』设置页（<code>https://dev.tencent.com/u/&lt;Coding账号名称&gt;/p/&lt;Coding账号名称&gt;/git/pages/settings</code>）中绑定自定义域名。</p></li></ol></li></ol><p>至此，您的Hexo博客已经解析到自定义域名，<code>https://&lt;Github账号名称&gt;.github.io</code>和<code>https://&lt;Coding账号名称&gt;.coding.me</code>依然可用。</p><h3 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h3><h4 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h4><p>Hexo默认的主题是landscape，推荐以下主题：</p><ol><li><a href="https://github.com/shenliyang/hexo-theme-snippet#hexo-theme-snippet" target="_blank" rel="noopener">snippet</a></li><li><a href="https://github.com/iTimeTraveler/hexo-theme-hiero#hiero" target="_blank" rel="noopener">Hiero</a></li><li><a href="https://github.com/tangkunyin/hexo-theme-jsimple#jsimple" target="_blank" rel="noopener">JSimple</a></li><li><a href="https://github.com/chaooo/hexo-theme-BlueLake#bluelake" target="_blank" rel="noopener">BlueLake</a></li></ol><p>详见：<a href="https://github.com/search?q=hexo-theme" target="_blank" rel="noopener">https://github.com/search?q=hexo-theme</a></p><h4 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h4><ol><li>下载主题</li><li>将下载好的主题文件夹，粘贴到站点目录的<code>themes</code>下。</li><li>更改站点配置文件<code>_config.yml</code> 的theme字段，为主题文件夹的名称：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: &lt;主题文件夹的名称&gt;</span><br></pre></td></tr></table></figure><h4 id="主题优化-1"><a href="#主题优化-1" class="headerlink" title="主题优化"></a>主题优化</h4><p>以上主题都有比较详细的说明文档，本节主要解决主题优化的常见问题。</p><p>主题优化一般包括：</p><ul><li><p><strong>设置「RSS」</strong></p></li><li><p><strong>添加「标签」页面</strong></p></li><li><p><strong>添加「分类」页面</strong></p></li><li><p><strong>设置「字体」</strong></p><p>问题：引用国外字体镜像较慢。</p><p>解决：可以改用国内的。将\themes*\layout_partials\head external-fonts.swig文件中fonts.google.com改成fonts.lug.ustc.edu.cn。</p></li><li><p><strong>设置「代码高亮主题」</strong></p></li><li><p><strong>侧边栏社交链接</strong></p><p>问题：图标哪里找？</p><p>解决：<a href="https://fontawesome.com/icons?d=gallery" target="_blank" rel="noopener">Font Awesome</a></p></li><li><p><strong>开启打赏功能</strong></p><p>问题：微信支付宝二维码不美观，规格不一。</p><p>解决：<a href="https://cli.im/weixin" target="_blank" rel="noopener">在线生成二维码</a></p></li><li><p><strong>设置友情链接</strong></p></li><li><p><strong>腾讯公益404页面</strong></p></li><li><p><strong>站点建立时间</strong></p></li><li><p><strong>订阅微信公众号</strong></p></li><li><p><strong>设置「动画效果」</strong></p><p>问题：慢，需要等待 JavaScript 脚本完全加载完毕后才会显示内容。<br>解决：将主题配置文件<code>_config.yml</code>中，use_motion字段的值设为 <code>false</code> 来关闭动画。</p></li><li><p><strong>设置「背景动画」</strong></p></li></ul><p>主题优化还包括：</p><h5 id="添加背景图"><a href="#添加背景图" class="headerlink" title="添加背景图"></a>添加背景图</h5><p>在 themes/*/source/css/_custom/custom.styl 中添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">body&#123;    background:url(/images/bg.jpg);    background-size:cover;    background-repeat:no-repeat;    background-attachment:fixed;    background-position:center;&#125;</span><br></pre></td></tr></table></figure><h5 id="修改Logo字体"><a href="#修改Logo字体" class="headerlink" title="修改Logo字体"></a>修改Logo字体</h5><p>在 <code>themes/*/source/css/_custom/custom.styl</code> 中添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;    font-family: Zitiming;    src: url(&apos;/fonts/Zitiming.ttf&apos;);&#125;.site-title &#123;    font-size: 40px !important;    font-family: &apos;Zitiming&apos; !important;&#125;</span><br></pre></td></tr></table></figure><p>其中字体文件在 <code>themes/next/source/fonts</code> 目录下，里面有个 <code>.gitkeep</code> 的隐藏文件，打开写入你要保留的字体文件，比如我的是就是写入 <code>Zitiming.ttf</code> ，具体字库自己从网上下载即可。</p><h5 id="修改内容区域的宽度"><a href="#修改内容区域的宽度" class="headerlink" title="修改内容区域的宽度"></a>修改内容区域的宽度</h5><p>编辑主题的 <code>source/css/_variables/custom.styl</code> 文件，新增变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 修改成你期望的宽度$content-desktop = 700px// 当视窗超过 1600px 后的宽度$content-desktop-large = 900px</span><br></pre></td></tr></table></figure><h5 id="网站标题栏背景颜色"><a href="#网站标题栏背景颜色" class="headerlink" title="网站标题栏背景颜色"></a>网站标题栏背景颜色</h5><p>打开 <code>themes/*/source/css/_custom/custom.styl</code> ,在里面写下如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.site-meta &#123;  background: $blue; //修改为自己喜欢的颜色&#125;</span><br></pre></td></tr></table></figure><h5 id="自定义鼠标样式"><a href="#自定义鼠标样式" class="headerlink" title="自定义鼠标样式"></a>自定义鼠标样式</h5><p>打开 <code>themes/*/source/css/_custom/custom.styl</code> ,在里面写下如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 鼠标样式  * &#123;      cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword2.ico&quot;),auto!important  &#125;  :active &#123;      cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword1.ico&quot;),auto!important  &#125;</span><br></pre></td></tr></table></figure><h5 id="文章加密访问"><a href="#文章加密访问" class="headerlink" title="文章加密访问"></a>文章加密访问</h5><p>打开 <code>themes/*/layout/_partials/head.swig</code>文件,在 <code></code>之前插入代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;    (function()&#123;        if(&apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123;            if (prompt(&apos;请输入密码&apos;) !== &apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123;                alert(&apos;密码错误&apos;);                history.back();            &#125;        &#125;    &#125;)();&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>写文章时加上<code>password: *</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---title: 2018date: 2018-10-25 16:10:03password: 123456---</span><br></pre></td></tr></table></figure><h5 id="实现点击出现桃心效果"><a href="#实现点击出现桃心效果" class="headerlink" title="实现点击出现桃心效果"></a>实现点击出现桃心效果</h5><ol><li>在<code>/themes/*/source/js/src</code>下新建文件<code>click.js</code>，接着把以下粘贴到<code>click.js</code>文件中。<br>代码如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure><ol><li>在<code>\themes\*\layout\_layout.swig</code>文件末尾添加：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/clicklove.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="静态资源压缩"><a href="#静态资源压缩" class="headerlink" title="静态资源压缩"></a>静态资源压缩</h5><p>在站点目录下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gulp -g</span><br></pre></td></tr></table></figure><p>安装gulp插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-minify-css --savenpm install gulp-uglify --savenpm install gulp-htmlmin --savenpm install gulp-htmlclean --savenpm install gulp-imagemin --save</span><br></pre></td></tr></table></figure><p>在 <code>Hexo</code> 站点下新建 <code>gulpfile.js</code>文件，文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&apos;gulp&apos;);var minifycss = require(&apos;gulp-minify-css&apos;);var uglify = require(&apos;gulp-uglify&apos;);var htmlmin = require(&apos;gulp-htmlmin&apos;);var htmlclean = require(&apos;gulp-htmlclean&apos;);var imagemin = require(&apos;gulp-imagemin&apos;);// 压缩css文件gulp.task(&apos;minify-css&apos;, function() &#123;  return gulp.src(&apos;./public/**/*.css&apos;)  .pipe(minifycss())  .pipe(gulp.dest(&apos;./public&apos;));&#125;);// 压缩html文件gulp.task(&apos;minify-html&apos;, function() &#123;  return gulp.src(&apos;./public/**/*.html&apos;)  .pipe(htmlclean())  .pipe(htmlmin(&#123;    removeComments: true,    minifyJS: true,    minifyCSS: true,    minifyURLs: true,  &#125;))  .pipe(gulp.dest(&apos;./public&apos;))&#125;);// 压缩js文件gulp.task(&apos;minify-js&apos;, function() &#123;    return gulp.src([&apos;./public/**/.js&apos;,&apos;!./public/js/**/*min.js&apos;])        .pipe(uglify())        .pipe(gulp.dest(&apos;./public&apos;));&#125;);// 压缩 public/demo 目录内图片gulp.task(&apos;minify-images&apos;, function() &#123;    gulp.src(&apos;./public/demo/**/*.*&apos;)        .pipe(imagemin(&#123;           optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）           progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片           interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染           multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化        &#125;))        .pipe(gulp.dest(&apos;./public/uploads&apos;));&#125;);// 默认任务gulp.task(&apos;default&apos;, [  &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos;,&apos;minify-images&apos;]);</span><br></pre></td></tr></table></figure><p>只需要每次在执行 <code>generate</code> 命令后执行 <code>gulp</code> 就可以实现对静态资源的压缩，压缩完成后执行 <code>deploy</code> 命令同步到服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo ggulphexo d</span><br></pre></td></tr></table></figure><h5 id="修改访问URL路径"><a href="#修改访问URL路径" class="headerlink" title="修改访问URL路径"></a>修改访问URL路径</h5><p>默认情况下访问URL路径为：<code>domain/2018/10/18/关于本站</code>,修改为 <code>domain/About/关于本站</code>。 编辑 <code>Hexo</code> 站点下的 <code>_config.yml</code> 文件，修改其中的 <code>permalink</code>字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permalink: :category/:title/</span><br></pre></td></tr></table></figure><h5 id="博文置顶"><a href="#博文置顶" class="headerlink" title="博文置顶"></a>博文置顶</h5><ol><li><p>安装插件</p><p>$ npm uninstall hexo-generator-index –save<br>$ npm install hexo-generator-index-pin-top –save</p></li></ol><p>然后在需要置顶的文章的Front-matter中加上top即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---title: 2018date: 2018-10-25 16:10:03top: 10---</span><br></pre></td></tr></table></figure><ol><li>设置置顶标志</li></ol><p>打开：/themes/*/layout/_macro/post.swig，定位到</p><p>，插入以下代码即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if post.top %&#125;    置顶  |&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h5 id="在右上角或者左上角实现fork-me-on-github"><a href="#在右上角或者左上角实现fork-me-on-github" class="headerlink" title="在右上角或者左上角实现fork me on github"></a>在右上角或者左上角实现fork me on github</h5><ol><li>选择样式<a href="https://blog.github.com/2008-12-19-github-ribbons/" target="_blank" rel="noopener">GitHub Ribbons</a>,</li><li>修改图片跳转链接,将<code>&lt;a href=&quot;https://github.com/you&quot;&gt;</code>中的链接换为自己Github链接：</li><li>打开 <code>themes/next/layout/_layout.swig</code> 文件，把代码复制到<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>下面。</li></ol><h5 id="主页文章添加边框阴影效果"><a href="#主页文章添加边框阴影效果" class="headerlink" title="主页文章添加边框阴影效果"></a>主页文章添加边框阴影效果</h5><p>打开 <code>themes/*/source/css/_custom/custom.styl</code> ,向里面加代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 主页文章添加阴影效果.post &#123;   margin-top: 0px;   margin-bottom: 60px;   padding: 25px;   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);&#125;</span><br></pre></td></tr></table></figure><h5 id="显示当前浏览进度"><a href="#显示当前浏览进度" class="headerlink" title="显示当前浏览进度"></a>显示当前浏览进度</h5><p>修改<code>themes/*/_config.yml</code>，把 <code>false</code> 改为 <code>true</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Back to top in sidebarb2t: true# Scroll percent label in b2t buttonscrollpercent: true</span><br></pre></td></tr></table></figure><h5 id="创建分类页"><a href="#创建分类页" class="headerlink" title="创建分类页"></a>创建分类页</h5><p>在终端窗口下，定位到 <code>Hexo</code> 站点目录下，新建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd &lt;站点目录&gt;$ hexo new page categories</span><br></pre></td></tr></table></figure><h5 id="加入-广告"><a href="#加入-广告" class="headerlink" title="加入 广告"></a>加入 广告</h5><p>主要有两种：<a href="https://ssp.baidu.com/static/register.html" target="_blank" rel="noopener">百度SSP</a>和<a href="https://www.google.com/adsense/start/#/?modal_active=none" target="_blank" rel="noopener">谷歌Adsense</a>。方法类似：</p><ol><li><p>注册，复制广告代码</p></li><li><p>部署到网站。</p><p>2.1. 新建 <code>theme/*/layout/_custom/google_ad.swig</code>，将 AdSense 上的代码粘贴进去</p><p>2.2. 头部。在 <code>theme/*/layout/_custom/head.swig</code> 中也粘贴一份</p><p>2.3. 每篇博客。在 <code>theme/*/layout/post.swig</code> 里中在希望看到的地方加上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include &apos;_custom/google_ad.swig&apos; %&#125;</span><br></pre></td></tr></table></figure><p>例如：在 <code>&lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt; &lt;/div&gt;</code> 中间插入，总代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block content %&#125;     </span><br><span class="line"></span><br><span class="line">       &#123;&#123; post_template.render(page) &#125;&#125;</span><br><span class="line">       &#123;% include &apos;_custom/google_ad.swig&apos; %&#125;</span><br><span class="line">        &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li><li><p>等待审核通过。如果失败，可再次申请。</p></li></ol><h5 id="添加萌萌哒"><a href="#添加萌萌哒" class="headerlink" title="添加萌萌哒"></a>添加萌萌哒</h5><ol><li><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure></li><li><p>复制你喜欢的模型名字：</p><p>Epsilon2.1</p><p><a href="https://huaji8.top/img/live2d/Epsilon2.1.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/Epsilon2.1.gif" alt="img"></a></p><p>Gantzert_Felixander</p><p><a href="https://huaji8.top/img/live2d/Gantzert_Felixander.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/Gantzert_Felixander.gif" alt="img"></a></p><p>haru</p><p><a href="https://huaji8.top/img/live2d/haru.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/haru.gif" alt="img"></a></p><p>miku</p><p><a href="https://huaji8.top/img/live2d/miku.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/miku.gif" alt="img"></a></p><p>ni-j</p><p><a href="https://huaji8.top/img/live2d/ni-j.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/ni-j.gif" alt="img"></a></p><p>nico</p><p><a href="https://huaji8.top/img/live2d/nico.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/nico.gif" alt="img"></a></p><p>nietzche</p><p><a href="https://huaji8.top/img/live2d/nietzche.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/nietzche.gif" alt="img"></a></p><p>nipsilon</p><p><a href="https://huaji8.top/img/live2d/nipsilon.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/nipsilon.gif" alt="img"></a></p><p>nito</p><p><a href="https://huaji8.top/img/live2d/nito.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/nito.gif" alt="img"></a></p><p>shizuku</p><p><a href="https://huaji8.top/img/live2d/shizuku.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/shizuku.gif" alt="img"></a></p><p>tsumiki</p><p><a href="https://huaji8.top/img/live2d/tsumiki.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/tsumiki.gif" alt="img"></a></p><p>wanko</p><p><a href="https://huaji8.top/img/live2d/wanko.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/wanko.gif" alt="img"></a></p><p>z16</p><p><a href="https://huaji8.top/img/live2d/z16.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/z16.gif" alt="img"></a></p><p>hibiki</p><p><a href="https://huaji8.top/img/live2d/hibiki.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/hibiki.gif" alt="img"></a></p><p>koharu</p><p><a href="https://huaji8.top/img/live2d/koharu.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/koharu.gif" alt="img"></a></p><p>haruto</p><p><a href="https://huaji8.top/img/live2d/haruto.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/haruto.gif" alt="img"></a></p><p>Unitychan</p><p><a href="https://huaji8.top/img/live2d/Unitychan.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/Unitychan.gif" alt="img"></a></p><p>tororo</p><p><a href="https://huaji8.top/img/live2d/tororo.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/tororo.gif" alt="img"></a></p><p>hijiki</p><p><a href="https://huaji8.top/img/live2d/hijiki.gif" target="_blank" rel="noopener"><img src="https://huaji8.top/img/live2d/hijiki.gif" alt="img"></a></p></li><li><p>将以下代码添加到主题配置文件<code>_config.yml</code>，修改&lt;你喜欢的模型名字&gt;：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">live2d:  enable: true  scriptFrom: local  pluginRootPath: live2dw/  pluginJsPath: lib/  pluginModelPath: assets/  tagMode: false  log: false  model:    use: live2d-widget-model-&lt;你喜欢的模型名字&gt;  display:    position: right    width: 150    height: 300  mobile:    show: true</span><br></pre></td></tr></table></figure></li><li><p>建配置文件</p><p>4.1. 在站点目录下建文件夹<code>live2d_models</code>，</p><p>4.2. 再在<code>live2d_models</code>下建文件夹<code>&lt;你喜欢的模型名字&gt;</code>,</p><p>4.3. 再在<code>&lt;你喜欢的模型名字&gt;</code>下建json文件：&lt;你喜欢的模型名字&gt;.model.json</p></li><li><p>安装模型。在命令行（即Git Bash）运行以下命令即可：</p><blockquote><p>npm install –save live2d-widget-model-&lt;你喜欢的模型名字&gt;</p></blockquote></li><li><p>在命令行（即Git Bash）运行以下命令， 在<code>http://127.0.0.1:4000/</code>查看测试结果:</p><blockquote><p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</p></blockquote></li></ol><h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><p>以下插件（评论系统、数据统计与分析、内容分享服务、搜索服务）各选一个即可。</p><h4 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h4><table><thead><tr><th></th><th>推荐指数</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a></td><td>4</td><td>每天30000条评论，10GB的储存</td><td>作者评论无标识</td></tr><tr><td><a href="https://livere.com/" target="_blank" rel="noopener">来必力/livere</a></td><td>4</td><td>多种账号登录</td><td>评论无法导出</td></tr><tr><td><a href="http://changyan.kuaizhan.com/" target="_blank" rel="noopener">畅言</a></td><td>3</td><td>美观</td><td>必须备案域名</td></tr><tr><td><a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">gitment</a></td><td>3</td><td>简洁</td><td>只能登陆github评论</td></tr><tr><td>Disqus</td><td>1</td><td></td><td>需要翻*墙</td></tr></tbody></table><h5 id="Valine"><a href="#Valine" class="headerlink" title="Valine"></a>Valine</h5><p>1.1. 获取APP ID 和 APP Key</p><p>请先登录或注册 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a>, 进入控制台后点击左下角创建应用，</p><p>进入刚刚创建的应用，选择左下角的<code>设置</code>&gt;<code>应用Key</code>，然后就能看到你的<code>APP ID</code>和<code>APP Key</code>了。</p><p>1.2. 填写APP ID 和 APP Key到主题配置文件<code>_config.yml</code></p><p>1.3. 运行<code>hexo g&amp;&amp;hexo d</code>推送到博客。</p><h5 id="来必力-livere"><a href="#来必力-livere" class="headerlink" title="来必力/livere"></a>来必力/livere</h5><p>2.1. 登陆 <a href="https://livere.com/" target="_blank" rel="noopener">来必力</a> 获取你的 LiveRe UID。</p><p>2.2. 填写LiveRe UID到主题配置文件<code>_config.yml</code></p><h5 id="畅言"><a href="#畅言" class="headerlink" title="畅言"></a>畅言</h5><p>3.1.获取APP ID 和 APP Key</p><p>请先登录或注册 <a href="http://changyan.kuaizhan.com/" target="_blank" rel="noopener">畅言</a>, 点击“立即免费获取畅言”，</p><p>新建站点，点击管理，点击评论插件&gt;评论管理，</p><p>点击后台总览，然后就能看到你的<code>APP ID</code>和<code>APP Key</code>了。</p><p>3.2. 填写APP ID 和 APP Key到主题配置文件<code>_config.yml</code></p><p>3.3. 运行<code>hexo g&amp;&amp;hexo d</code>推送到博客。</p><h5 id="gitment"><a href="#gitment" class="headerlink" title="gitment"></a>gitment</h5><p>4.1. 安装插件：</p><blockquote><p>npm i –save gitment</p></blockquote><p>4.2. 申请应用</p><p>在<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">New OAuth App</a>为你的博客应用一个密钥:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Application name:随便写Homepage URL:这个也可以随意写,就写你的博客地址就行Application description:描述,也可以随意写Authorization callback URL:这个必须写你的博客地址</span><br></pre></td></tr></table></figure><p>4.3. 配置</p><p>编辑主题配置文件<code>themes/*/_config.yml</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Gitment# Introduction: https://imsun.net/posts/gitment-introduction/gitment:  enable: true  mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway  count: true # Show comments count in post meta area  lazy: false # Comments lazy loading with a button  cleanly: false # Hide &apos;Powered by ...&apos; on footer, and more  language: # Force language, or auto switch by theme  github_user: &#123;you github user id&#125;  github_repo: 公开的git仓库,评论会作为那个项目的issue  client_id: &#123;刚才申请的ClientID&#125;  client_secret: &#123;刚才申请的Client Secret&#125;  proxy_gateway: # Address of api proxy, See: https://github.com/aimingoo/intersect  redirect_protocol: # Protocol of redirect_uri with force_redirect_pro</span><br></pre></td></tr></table></figure><h5 id="Disqus"><a href="#Disqus" class="headerlink" title="Disqus"></a>Disqus</h5><p>编辑 主题配置文件<code>themes/*/_config.yml</code>， 将 disqus 下的 enable 设定为 true，同时提供您的 shortname。count 用于指定是否显示评论数量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disqus:  enable: false  shortname:  count: true</span><br></pre></td></tr></table></figure><h4 id="数据统计与分析"><a href="#数据统计与分析" class="headerlink" title="数据统计与分析"></a>数据统计与分析</h4><table><thead><tr><th></th><th>推荐指数</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a></td><td>4</td><td>可直接将访问次数显示在您在网页上（也可不显示）</td><td>只计数</td></tr><tr><td>百度统计</td><td>3</td><td></td><td>收录慢</td></tr></tbody></table><h5 id="不蒜子"><a href="#不蒜子" class="headerlink" title="不蒜子"></a>不蒜子</h5><p>编辑 主题配置文件 <code>themes/*/_config.yml</code>中的<code>busuanzi_count</code>的配置项即可。</p><ul><li>当<code>enable: true</code>时，代表开启全局开关。</li><li>若<code>site_uv</code>（本站访客数）、<code>site_pv</code>（本站访客数）、<code>page_pv</code>（本文总阅读量）的值均为<code>false</code>时，不蒜子仅作记录而不会在页面上显示。</li></ul><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不蒜子官方因七牛强制过期原有的『dn-lbstatics.qbox.me』域名（预计2018年10月初），与客服沟通数次无果，即使我提出为此付费也不行，只能更换域名到『busuanzi.ibruce.info』！</span><br></pre></td></tr></table></figure><p>解决办法：</p><ol><li><p>找到主题调用不蒜子的swig文件。一般在”\themes*\layout_third-party\analytics\busuanzi-counter.swig”</p></li><li><p>更改域名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">把原有的：&lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;域名改一下即可：&lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h5 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h5><ol><li>登录 <a href="http://tongji.baidu.com/" target="_blank" rel="noopener">百度统计</a>，定位到站点的代码获取页面</li><li>复制统计脚本 id，如图：<br>​<a href="http://theme-next.iissnan.com/uploads/five-minutes-setup/analytics-baidu-id.png" target="_blank" rel="noopener"><img src="http://theme-next.iissnan.com/uploads/five-minutes-setup/analytics-baidu-id.png" alt="img"></a></li><li>编辑 主题配置文件<code>themes/*/_config.yml</code>，修改字段 <code>google_analytics</code>，值设置成你的统计脚本 id。</li></ol><h4 id="内容分享服务"><a href="#内容分享服务" class="headerlink" title="内容分享服务"></a>内容分享服务</h4><table><thead><tr><th></th><th>推荐指数</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><a href="http://share.baidu.com/" target="_blank" rel="noopener">百度分享</a></td><td>4</td><td>稳定</td><td>不太美观</td></tr><tr><td><a href="https://github.com/revir/need-more-share2" target="_blank" rel="noopener">need-more-share2</a></td><td>4</td><td>美观</td><td>更新不及时（比如微信分享API）</td></tr></tbody></table><h5 id="百度分享"><a href="#百度分享" class="headerlink" title="百度分享"></a>百度分享</h5><p>编辑 主题配置文件，添加/修改字段 <code>baidushare</code>，值为 <code>true</code>即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 百度分享服务baidushare: true</span><br></pre></td></tr></table></figure><h5 id="need-more-share2"><a href="#need-more-share2" class="headerlink" title="need-more-share2"></a>need-more-share2</h5><p>编辑 主题配置文件，添加/修改字段 <code>needmoreshare2</code>，值为 <code>true</code>即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">needmoreshare2:  enable: true</span><br></pre></td></tr></table></figure><h4 id="搜索服务"><a href="#搜索服务" class="headerlink" title="搜索服务"></a>搜索服务</h4><table><thead><tr><th></th><th>推荐指数</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>Local Search</td><td>4</td><td>配置方便</td><td></td></tr><tr><td>Swiftype</td><td>2</td><td></td><td>需注册</td></tr><tr><td>Algolia</td><td>2</td><td></td><td>需注册</td></tr></tbody></table><h5 id="Local-Search"><a href="#Local-Search" class="headerlink" title="Local Search"></a>Local Search</h5><p>添加百度/谷歌/本地 自定义站点内容搜索</p><ol><li><p>安装 <code>hexo-generator-searchdb</code>，在站点的根目录下执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li><li><p>编辑 站点配置文件，新增以下内容到任意位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search:  path: search.xml  field: post  format: html  limit: 10000</span><br></pre></td></tr></table></figure></li><li><p>编辑 主题配置文件，启用本地搜索功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Local searchlocal_search:  enable: true</span><br></pre></td></tr></table></figure></li></ol><h3 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h3><p>如果你使用Hexo遇到同样的问题,这里有一些常见问题的解决方案。</p><h4 id="YAML-Parsing-Error"><a href="#YAML-Parsing-Error" class="headerlink" title="YAML Parsing Error"></a>YAML Parsing Error</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JS-YAML: incomplete explicit mapping pair; a key node is missed at line 18, column 29:      last_updated: Last updated: %s</span><br></pre></td></tr></table></figure><ol><li>参数中包含冒号，请用加引号，如<code>Last updated: %s</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JS-YAML: bad indentation of a mapping entry at line 18, column 31:      last_updated：&quot;Last updated: %s&quot;</span><br></pre></td></tr></table></figure><ol><li>字段后面的冒号必须为<strong>英文冒号</strong>，如：last_updated:</li><li>字段冒号后面必须跟一个空格，如：last_updated: “Last updated: %s”</li></ol><h4 id="EMFILE-Error"><a href="#EMFILE-Error" class="headerlink" title="EMFILE Error"></a>EMFILE Error</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: EMFILE, too many open files</span><br></pre></td></tr></table></figure><p>生成大量的文件时，可能遇到EMFILE错误。</p><p>可以运行以下命令来增加允许同步I / O操作的数量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ulimit -n 10000</span><br></pre></td></tr></table></figure><h4 id="Process-Out-of-Memory"><a href="#Process-Out-of-Memory" class="headerlink" title="Process Out of Memory"></a>Process Out of Memory</h4><p>当<code>hexo g</code>时，遇到以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - process out of memory</span><br></pre></td></tr></table></figure><p>如下，更改<code>hexo-cli</code>文件的第一行，来增大nodejs堆内存.该bug已在<a href="https://github.com/hexojs/hexo/issues/1735" target="_blank" rel="noopener">新版本</a>修复。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env node --max_old_space_size=8192</span><br></pre></td></tr></table></figure><h4 id="Git-Deployment-Problems"><a href="#Git-Deployment-Problems" class="headerlink" title="Git Deployment Problems"></a>Git Deployment Problems</h4><ol><li>RPC failed</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: RPC failed; result=22, HTTP code = 403fatal: &apos;username.github.io&apos; does not appear to be a git repository</span><br></pre></td></tr></table></figure><p>确保你有你的电脑上设置git正确或尝试使用HTTPS存储库URL。</p><ol><li>Error: ENOENT: no such file or directory</li></ol><p>这个需要有一定的git的知识，因为可能是由于写错了标签,类别,或文件名，导致本地和github冲突了，Git不能自动合并这一变化所以它打破了自动分支。</p><p>解决办法：</p><ol><li>检查文章的标签和类别,确保本地和github上是相同的。</li><li>合并分支（Commit）。</li><li>清除，重构。在站点目录下，命令行（即Git Bash）运行<code>hexo clean</code>和<code>hexo g</code></li><li>手动将站点目录下的<code>public</code>文件夹复制到您的桌面</li><li>从你的master分支切换到部署在本地分支。</li><li>从桌面复制<code>public</code>文件夹到本地分支。</li><li>合并分支到github（Commit）。</li><li>切回master分支。</li></ol><h4 id="Server-Problems"><a href="#Server-Problems" class="headerlink" title="Server Problems"></a>Server Problems</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: listen EADDRINUSE</span><br></pre></td></tr></table></figure><p>你可能使用相同的端口，同时开启了两个Hexo服务器。如果需要同时开启，可以尝试修改端口设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server -p 5000</span><br></pre></td></tr></table></figure><h4 id="Plugin-Installation-Problems"><a href="#Plugin-Installation-Problems" class="headerlink" title="Plugin Installation Problems"></a>Plugin Installation Problems</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ERR! node-waf configure build</span><br></pre></td></tr></table></figure><p>这个错误可能发生在试图安装一个用Cc++或另一个javascript语言编写的插件。确保您已经安装了正确的编译器在您的计算机上。</p><h4 id="Error-with-DTrace-Mac-OS-X"><a href="#Error-with-DTrace-Mac-OS-X" class="headerlink" title="Error with DTrace (Mac OS X)"></a>Error with DTrace (Mac OS X)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; [Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;&#123; [Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;&#123; [Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br></pre></td></tr></table></figure><p>DTrace安装可能有问题，重装:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo --no-optional</span><br></pre></td></tr></table></figure><p>详见 <a href="https://github.com/hexojs/hexo/issues/1326#issuecomment-113871796" target="_blank" rel="noopener">#1326</a></p><h4 id="Iterate-Data-Model-on-Jade-or-Swig"><a href="#Iterate-Data-Model-on-Jade-or-Swig" class="headerlink" title="Iterate Data Model on Jade or Swig"></a>Iterate Data Model on Jade or Swig</h4><p>Hexo使用仓库的数据模型。这不是一个数组,所以你可能需要将对象转换为iterable。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for post in site.posts.toArray() %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h4 id="Data-Not-Updated"><a href="#Data-Not-Updated" class="headerlink" title="Data Not Updated"></a>Data Not Updated</h4><p>一些数据不能更新或新生成的文件的最后一个版本完全相同。清理缓存，再试一次：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><h4 id="No-command-is-executed"><a href="#No-command-is-executed" class="headerlink" title="No command is executed"></a>No command is executed</h4><p>那个不能使用除<code>help</code>、<code>init</code>和<code>version</code>以外的命令行（即Git Bash）时, 有可能时站点目录下的 <code>package.json</code>文件，缺少<code>hexo</code>，如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;  &quot;hexo&quot;: &#123;    &quot;version&quot;: &quot;3.2.2&quot;  &#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="Escape-Contents"><a href="#Escape-Contents" class="headerlink" title="Escape Contents"></a>Escape Contents</h4><p>Hexo使用Nunjucks渲染的页面. <code>{ { } }</code>或<code>{ % % }</code>将解析和可能会引起麻烦， 如果要在博文中出现，必须使用三引号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Hello</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="ENOSPC-Error-Linux"><a href="#ENOSPC-Error-Linux" class="headerlink" title="ENOSPC Error (Linux)"></a>ENOSPC Error (Linux)</h4><p>如果运行命令<code>$ hexo server</code> 返回一个错误:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: watch ENOSPC …</span><br></pre></td></tr></table></figure><p>可以通过运行<code>$ npm dedupe</code>或者以下命令行（即Git Bash）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p</span><br></pre></td></tr></table></figure><p>来增加测试时，你可以看见的文件数量。</p><h4 id="EMPERM-Error-Windows-Subsystem-for-Linux"><a href="#EMPERM-Error-Windows-Subsystem-for-Linux" class="headerlink" title="EMPERM Error (Windows Subsystem for Linux)"></a>EMPERM Error (Windows Subsystem for Linux)</h4><p>如果在Windows Subsystem for Linux，运行命令<code>$ hexo server</code> 返回这个错误:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: watch /path/to/hexo/theme/ EMPERM</span><br></pre></td></tr></table></figure><p>因为目前在Windows Subsystem for Linux中，有些内容更改时，还不能实时更新到hexo服务器。</p><p>所以需要重新编译，再启动服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate$ hexo server -s</span><br></pre></td></tr></table></figure><h4 id="Template-render-error"><a href="#Template-render-error" class="headerlink" title="Template render error"></a>Template render error</h4><p>有时运行命令<code>$ hexo generate</code> 返回一个错误:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FATAL Something’s wrong. Maybe you can find the solution here: &lt;http://hexo.io/docs/troubleshooting.html&gt;Template render error: (unknown path)</span><br></pre></td></tr></table></figure><p>这意味着有些认不出来单词在你的文件，并且很可能在你的新博文,或者配置文件<code>_config.yml</code>中，比如缩进错误：</p><p>错误例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins:hexo-generator-feedhexo-generator-sitemap\</span><br></pre></td></tr></table></figure><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h4><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>[layout]可以为以下三种：</li></ul><table><thead><tr><th>参数名</th><th>功能</th><th>文章路径</th></tr></thead><tbody><tr><td>post</td><td>新建博文</td><td>source/_posts</td></tr><tr><td>page</td><td>新建页面（如404，分类）</td><td>source</td></tr><tr><td>draft</td><td>草稿</td><td>source/_drafts</td></tr></tbody></table><p>草稿可通过一下命令发布：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><ul><li><p>title注意：</p><p>不是博文标题，</p><p>是博文markdown文件的名字，</p><p>也是博文链接的后缀（如<code>https://www.simon96.online/2018/10/12/hexo-tutorial/</code>中的hexo-tutorial）</p></li></ul><h4 id="文章模版"><a href="#文章模版" class="headerlink" title="文章模版"></a>文章模版</h4><ul><li><p>创建模版</p><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p></li></ul><blockquote><p>$ hexo new blog “simon”</p></blockquote><p>在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>blog.md</code>，并根据其内容建立文章。</p><ul><li><p>修改参数</p><p>以下是您可以在模版中使用的变量：</p></li></ul><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td>layout</td><td>布局</td></tr><tr><td>title</td><td>标题</td></tr><tr><td>date</td><td>文件建立日期</td></tr></tbody></table><h4 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h4><p>就是博文最上方以 <code>---</code> 分隔的那部分。</p><p>默认可以使用的Front-matter：</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td><td></td></tr><tr><td><code>title</code></td><td>标题</td><td></td></tr><tr><td><code>date</code></td><td>建立日期</td><td>文件建立日期</td></tr><tr><td><code>updated</code></td><td>更新日期</td><td>文件更新日期</td></tr><tr><td><code>comments</code></td><td>开启文章的评论功能</td><td>true</td></tr><tr><td><code>tags</code></td><td>标签（不适用于分页）</td><td></td></tr><tr><td><code>categories</code></td><td>分类（不适用于分页）</td><td></td></tr><tr><td><code>permalink</code></td><td>覆盖文章网址</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第二周计划与总结</title>
      <link href="/2019/03/03/%E7%AC%AC%E4%BA%8C%E5%91%A8%E8%AE%A1%E5%88%92%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
      <url>/2019/03/03/%E7%AC%AC%E4%BA%8C%E5%91%A8%E8%AE%A1%E5%88%92%E4%B8%8E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="第二周计划与总结"><a href="#第二周计划与总结" class="headerlink" title="第二周计划与总结"></a>第二周计划与总结</h1><h2 id="英语六级"><a href="#英语六级" class="headerlink" title="英语六级"></a>英语六级</h2><ul><li style="list-style: none"><input type="checkbox" checked> Word List 5</li><li style="list-style: none"><input type="checkbox" checked> Word List 6</li><li style="list-style: none"><input type="checkbox" checked> Word List 7</li><li style="list-style: none"><input type="checkbox" checked> Word List 8</li></ul><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><ul><li style="list-style: none"><input type="checkbox" checked> 类</li><li style="list-style: none"><input type="checkbox" checked> IO库</li><li style="list-style: none"><input type="checkbox" checked> 顺序容器</li><li style="list-style: none"><input type="checkbox"> 泛型算法</li><li style="list-style: none"><input type="checkbox"> 关联容器</li><li style="list-style: none"><input type="checkbox"> 回顾</li></ul><h2 id="离散数学"><a href="#离散数学" class="headerlink" title="离散数学"></a>离散数学</h2><ul><li style="list-style: none"><input type="checkbox"> 离散数学及其应用</li></ul><h2 id="高等数学"><a href="#高等数学" class="headerlink" title="高等数学"></a>高等数学</h2><ul><li style="list-style: none"><input type="checkbox" checked> 8.3</li><li style="list-style: none"><input type="checkbox" checked> 8.4</li><li style="list-style: none"><input type="checkbox" checked> 8.5</li><li style="list-style: none"><input type="checkbox" checked> 8.6</li></ul><h2 id="Hexo博客搭建"><a href="#Hexo博客搭建" class="headerlink" title="Hexo博客搭建"></a>Hexo博客搭建</h2><ul><li style="list-style: none"><input type="checkbox" checked> Hexo博客搭建</li></ul><hr><h1 id="总结与反思"><a href="#总结与反思" class="headerlink" title="总结与反思"></a>总结与反思</h1><ul><li>这一周的状态还是不错的，C++的一些内容没有完成，（不过说实在的，C++的任务好像有些多了。）</li><li>感觉大学物理好难啊。需要下来好好看看。</li><li>要看《离散数学及其应用》了!</li><li>留给英语背单词的时间不是很多。下周要平衡一下。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大一下计划与总结 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
